<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java微服务（四）：深入 Prompt 工程</title>
      <link href="/posts/36722.html"/>
      <url>/posts/36722.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="4-深入-Prompt-工程"><a href="#4-深入-Prompt-工程" class="headerlink" title="4. 深入 Prompt 工程"></a>4. 深入 Prompt 工程</h2><p>如果说 <code>ChatClient</code> 是连接你和 AI 的电话线，那么 <strong>Prompt 就是你在这条电话线上说的话</strong>。你说得是否清晰、准确、有技巧，直接决定了电话那头的 AI 能否理解你的意图并给出满意的答复。Prompt 工程（Prompt Engineering）就是一门研究如何与 AI 高效沟通的艺术与科学。在本章，我将带你从理论到实践，彻底掌握它。</p><h4 id="4-1-Prompt-的重要性与基本原则"><a href="#4-1-Prompt-的重要性与基本原则" class="headerlink" title="4.1 Prompt 的重要性与基本原则"></a>4.1 Prompt 的重要性与基本原则</h4><p>在与大语言模型交互时，我们很容易犯一个错误：把模型想象成一个无所不知、能够完美揣测我们心思的人类。但实际上，它是一个基于海量数据训练出来的概率模型。你给它的输入（Prompt）越模糊，它输出的结果就越可能偏离你的预期。</p><blockquote><p><strong>Prompt 是与 AI 沟通的 API</strong>。就像调用一个软件 API 需要遵循其定义的参数和格式一样，与 AI 沟通也需要遵循一定的范式，才能获得稳定、可控的输出。</p></blockquote><p>以下是编写高效 Prompt 的几个基本原则：</p><ol><li><strong>清晰具体</strong>：避免使用模糊的词语。不要说“给我写点关于狗的东西”，而要说“为一位10岁的小学生，写一段150字左右的短文，介绍金毛寻回犬的性格特点和历史起源”。</li><li><strong>提供上下文</strong>：如果你的问题需要背景知识，请在 Prompt 中明确提供。例如，在分析一段用户评论前，先告诉模型：“你是一个电商平台的客服主管，请分析以下用户评论的情感倾向”。</li><li><strong>设定角色</strong>：这是最有效的技巧之一。让 AI 扮演一个角色，可以极大地约束它的行为和语言风格。例如，“你是一位资深的 Java 技术专家…”、“你是一位风趣幽默的脱口秀演员…”。</li><li><strong>施加约束</strong>：明确告诉模型你<strong>不</strong>想要什么，或者输出必须遵循的格式。例如，“…不要使用任何技术术语”、“…请以 JSON 格式输出，包含 name 和 email 两个字段”、“…回答不要超过100个字”。</li><li><strong>提供示例</strong>：如果需要模型遵循特定的输出格式或风格，最好的方法就是给它一两个例子。这比用语言描述格式要有效得多。</li></ol><h4 id="4-2-Prompt-类详解"><a href="#4-2-Prompt-类详解" class="headerlink" title="4.2 Prompt 类详解"></a>4.2 <code>Prompt</code> 类详解</h4><p>在 Spring AI 中，<code>org.springframework.ai.chat.prompt.Prompt</code> 类是所有与 <code>ChatClient</code> 交互的载体。它不仅仅是一个简单的字符串包装器，而是一个结构化的对象，用于封装发送给模型的完整指令集。</p><p>它的构造函数主要有两种：</p><ol><li><code>Prompt(String contents)</code>: 这是最简单的形式，将一个字符串包装成一个 <code>UserMessage</code>。</li><li><code>Prompt(List&lt;Message&gt; messages)</code>: 这是更通用和强大的形式，允许你传入一个由不同角色组成的 <code>Message</code> 列表，构建复杂的多轮对话或带有系统指令的请求。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单形式：等同于创建一个只包含单个 UserMessage 的 Prompt</span></span><br><span class="line"><span class="type">Prompt</span> <span class="variable">simplePrompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="string">&quot;你好，AI！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂形式：构建一个包含系统指令和用户提问的 Prompt</span></span><br><span class="line">List&lt;Message&gt; messages = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">messages.add(<span class="keyword">new</span> <span class="title class_">SystemMessage</span>(<span class="string">&quot;你是一个专业的翻译家，只将用户输入翻译成英文。&quot;</span>));</span><br><span class="line">messages.add(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(<span class="string">&quot;我爱编程。&quot;</span>));</span><br><span class="line"><span class="type">Prompt</span> <span class="variable">structuredPrompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(messages);</span><br></pre></td></tr></table></figure><p><code>Prompt</code> 对象还允许你附加 <code>PromptOptions</code>，用于在单次调用中覆盖全局的模型参数（如 <code>model</code>, <code>temperature</code> 等），这为动态调整 AI 行为提供了极大的灵活性。</p><p>在我们之前的代码中是如下编写的，可以把 <code>chatClient.prompt()</code> 理解为<strong>一次新的对话的“发起”或“启动信号”</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流式内容调用：返回纯文本内容的响应流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 用户的提问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个包含文本内容片段的 Flux 流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">getStreamContent</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">            .user(message)</span><br><span class="line">            .stream()</span><br><span class="line">            .content();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，既然有这么便捷的方式，为什么 Spring AI 还要设计一个看起来有些“繁琐”的 <code>Prompt</code> 类呢？</p><p><strong>答案是：<code>.user(message)</code> 只是一个快捷方式。而 <code>Prompt</code> 类，才是与AI进行一切复杂、有深度、有上下文交互的“官方语言”和标准容器。</strong></p><p>您可以把它们的关系想象成寄快递：</p><ul><li><strong><code>.user(message)</code></strong>：就像是寄一个最简单的**“信封”**。您只需把信（<code>message</code>）塞进去，写上地址，它就能寄出。非常快捷，但功能有限。</li><li><strong><code>Prompt</code> 类</strong>：这是一个可定制的、坚固的**“快递包裹”**。您不仅可以放入用户的信件，还可以放入各种“附件”和“特殊说明”，来指挥收件人（AI）如何处理这份包裹。</li></ul><p> <code>ChatService</code> 能那么简单，是因为它处理的是最基础的“信封”场景。但一旦需求变得复杂，<code>Prompt</code> 类的威力就体现出来了。</p><p>以下是 <code>.user(message)</code> 这种简单形式<strong>无法做到</strong>，而必须使用 <code>Prompt</code> 类才能实现的核心功能：</p><h5 id="4-2-1-角色扮演与指令设定-SystemMessage"><a href="#4-2-1-角色扮演与指令设定-SystemMessage" class="headerlink" title="4.2.1 角色扮演与指令设定 (SystemMessage)"></a><strong>4.2.1 角色扮演与指令设定 (<code>SystemMessage</code>)</strong></h5><p>我们经常需要AI扮演一个特定的角色或遵循特定的规则。这通过 <code>SystemMessage</code>（系统消息）来实现，而 <code>SystemMessage</code> 必须被包裹在 <code>Prompt</code> 对象中。</p><p><strong>您的示例代码正是完美的说明：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流式内容调用：返回纯文本内容的响应流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 用户的提问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个包含文本内容片段的 Flux 流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">getStreamContent</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">            .system(<span class="string">&quot;你是一个擅长翻译的大语言模型,会吧用户说的中文都翻译为英文&quot;</span>)</span><br><span class="line">            .user(message)</span><br><span class="line">            .stream()</span><br><span class="line">            .content();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.user()</code> 快捷方式无法单独传递这种系统级的“人设”指令。</p><h5 id="4-2-2-提供上下文与对话历史-AssistantMessage"><a href="#4-2-2-提供上下文与对话历史-AssistantMessage" class="headerlink" title="4.2.2. 提供上下文与对话历史 (AssistantMessage)"></a><strong>4.2.2. 提供上下文与对话历史 (<code>AssistantMessage</code>)</strong></h5><p>这是实现<strong>多轮对话</strong>的核心。为了让AI“记住”之前的对话，我们需要把历史聊天记录一起发送给它。这些历史记录就包含了之前的 <code>UserMessage</code> 和 <code>AssistantMessage</code>（AI的回答）。</p><p><strong>场景示例：</strong></p><ol><li><strong>用户</strong>：“2022年世界杯谁赢了？”</li><li><strong>AI</strong>：“阿根廷队赢得了2022年世界杯。”</li><li><strong>用户</strong>：“他们的队长是谁？”  &lt;– <em>如果只发送这个问题，AI无法理解“他们”是谁</em></li></ol><p>要让AI正确回答，我们必须构建一个包含历史记录的 <code>Prompt</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Message&gt; conversationHistory = List.of(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">UserMessage</span>(<span class="string">&quot;2022年世界杯谁赢了？&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AssistantMessage</span>(<span class="string">&quot;阿根廷队赢得了2022年世界杯。&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">UserMessage</span>(<span class="string">&quot;他们的队长是谁？&quot;</span>) <span class="comment">// 当前问题</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">Prompt</span> <span class="variable">promptWithHistory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(conversationHistory);</span><br><span class="line"><span class="comment">// 发送这个携带了完整上下文的 Prompt，AI 才能知道 &quot;他们&quot; 指的是阿根廷队</span></span><br><span class="line"><span class="type">ChatResponse</span> <span class="variable">response</span> <span class="operator">=</span> chatClient.call(promptWithHistory); </span><br><span class="line"><span class="comment">// AI 会回答 &quot;利昂内尔·梅西是他们的队长。&quot;</span></span><br></pre></td></tr></table></figure><p><code>ChatMemory</code> 的工作原理，本质上就是在后台自动帮我们组装这个包含历史记录的 <code>List&lt;Message&gt;</code>，并创建 <code>Prompt</code> 对象。</p><h5 id="4-2-3-请求级选项覆盖-PromptOptions"><a href="#4-2-3-请求级选项覆盖-PromptOptions" class="headerlink" title="4.2.3 请求级选项覆盖 (PromptOptions)"></a><strong>4.2.3 请求级选项覆盖 (<code>PromptOptions</code>)</strong></h5><p>有时，我们可能希望某一次特定的API调用使用不同的模型或参数（比如更高的 <code>temperature</code> 来增加创意），而不想修改全局配置。<code>Prompt</code> 类允许我们在创建时附加一个 <code>PromptOptions</code> 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设全局配置的模型是 deepseek-chat, temperature 是 0.7</span></span><br><span class="line"><span class="comment">// 但这次我想要更有创意的回答</span></span><br><span class="line"></span><br><span class="line"><span class="type">OpenAiChatOptions</span> <span class="variable">customOptions</span> <span class="operator">=</span> OpenAiChatOptions.builder()</span><br><span class="line">        .withModel(<span class="string">&quot;gpt-4o&quot;</span>) <span class="comment">// 本次调用临时切换到 gpt-4o</span></span><br><span class="line">        .withTemperature(<span class="number">0.95f</span>) <span class="comment">// 大幅提高温度</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="type">Prompt</span> <span class="variable">creativePrompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="string">&quot;写一首关于机器人在雨中哭泣的诗。&quot;</span>, customOptions);</span><br><span class="line">chatClient.call(creativePrompt);</span><br></pre></td></tr></table></figure><h4 id="4-3-Message-与角色"><a href="#4-3-Message-与角色" class="headerlink" title="4.3 Message 与角色"></a>4.3 <code>Message</code> 与角色</h4><p><code>Message</code> 是构成 <code>Prompt</code> 的基本单位。Spring AI 定义了四种核心的 <code>Message</code> 类型，它们分别对应了与模型对话中不同的角色。理解并善用它们，是实现高级、可控的人工智能交互&#96;&#96;的关键。</p><p>下表详细说明了每种消息类型的作用和典型应用场景：</p><table><thead><tr><th><strong>消息类型 (Message Type)</strong></th><th><strong>核心作用</strong></th><th><strong>典型应用场景与示例</strong></th></tr></thead><tbody><tr><td><strong><code>SystemMessage</code></strong>&lt;br&gt;(系统消息)</td><td>用于设定 AI 的<strong>角色、行为准则、个性、目标</strong>和任何高级指令。它就像是给 AI 的“出厂设置”或“后台指令”，通常在对话开始时发送，并对整个对话过程持续生效，是<strong>优先级最高</strong>的指令。</td><td>为 AI 赋予人格或限定其能力范围</td></tr><tr><td><strong><code>UserMessage</code></strong>&lt;br&gt;(用户消息)</td><td>代表<strong>最终用户的输入</strong>。它就是用户的提问、指令或对话内容。在一次请求中，这通常是消息列表的最后一条。</td><td>用户向 AI 发起的每一次具体的提问</td></tr><tr><td><strong><code>AssistantMessage</code></strong>&lt;br&gt;(助手消息)</td><td>代表 <strong>AI 自己之前</strong>的回复。它是构建多轮对话历史、让 AI <strong>“记住”上下文</strong>的关键部分。</td><td>在实现对话记忆（Chat Memory）功能时，将历史记录中的每一条 AI 回复封装起来，重新传回给模型</td></tr><tr><td><strong><code>FunctionMessage</code></strong>&lt;br&gt;(函数消息)</td><td>用于<strong>函数&#x2F;工具调用（Function&#x2F;Tool Calling）场景。当 AI 决定调用一个外部工具后，应用需要将该工具的执行结果</strong>通过 <code>FunctionMessage</code> 返回给 AI，以便它能根据结果生成最终的自然语言回答。</td><td>AI 需要获取实时信息或执行操作时</td></tr></tbody></table><hr><h4 id="4-4-PromptTemplate：让-Prompt-动起来"><a href="#4-4-PromptTemplate：让-Prompt-动起来" class="headerlink" title="4.4 PromptTemplate：让 Prompt 动起来"></a>4.4 <code>PromptTemplate</code>：让 Prompt 动起来</h4><p>在实际应用中，我们的 Prompt 很少是完全静态的。通常需要根据用户的输入、查询的数据库结果或其他动态信息来构建。手动拼接字符串不仅繁琐、易错，而且难以维护。<code>PromptTemplate</code> 正是为此而生。</p><p><code>PromptTemplate</code> 允许你定义一个包含占位符（变量）的模板字符串，然后用一个 <code>Map</code> 来填充这些变量，最终渲染出一个完整的 <code>Prompt</code> 对象。</p><h5 id="4-4-1-简单示例：个性化问候"><a href="#4-4-1-简单示例：个性化问候" class="headerlink" title="4.4.1 简单示例：个性化问候"></a>4.4.1 简单示例：个性化问候</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径: src/main/java/com/example/hellospringai/service/ChatService.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatService</span><span class="params">(ChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【新方法】使用 PromptTemplate 实现动态翻译功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetLanguage 要翻译的目标语言 (e.g., &quot;英文&quot;, &quot;日文&quot;, &quot;法文&quot;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 要翻译的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 翻译后的文本内容流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">getDynamicTranslatedStream</span><span class="params">(String targetLanguage, String text)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 定义包含 &#123;targetLanguage&#125; 占位符的系统指令模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">systemPromptTemplate</span> <span class="operator">=</span> <span class="string">&quot;你是一个专业的、精通多种语言的翻译家。&quot;</span> + </span><br><span class="line">                                      <span class="string">&quot;请将用户接下来发送的所有内容都翻译成 &#123;targetLanguage&#125;。&quot;</span> +</span><br><span class="line">                                      <span class="string">&quot;不要添加任何与翻译结果无关的解释或寒暄。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                <span class="comment">// 2. 使用流式API的高级形式，直接传入模板和变量来构建 SystemMessage</span></span><br><span class="line">                .system(systemSpec -&gt; systemSpec</span><br><span class="line">                        .text(systemPromptTemplate) <span class="comment">// 设置模板字符串</span></span><br><span class="line">                        .param(<span class="string">&quot;targetLanguage&quot;</span>, targetLanguage) <span class="comment">// 绑定模板中的变量</span></span><br><span class="line">                )</span><br><span class="line">                .user(text) <span class="comment">// 用户输入原文</span></span><br><span class="line">                .stream()</span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-结构化输出：将-AI-响应映射为-POJO"><a href="#4-5-结构化输出：将-AI-响应映射为-POJO" class="headerlink" title="4.5 结构化输出：将 AI 响应映射为 POJO"></a>4.5 结构化输出：将 AI 响应映射为 POJO</h4><p>我们经常需要 AI 返回的不仅仅是一段自由文本，而是一个<strong>结构化的数据</strong>，比如 JSON。传统的做法是让 AI 生成 JSON 字符串，然后在 Java 代码中手动解析它。这种方式非常脆弱，因为 AI 可能返回一个格式不正确的 JSON，导致解析失败。</p><p><code>OutputConverter</code> 是 Spring AI 提供的利器，它能将模型的文本输出<strong>自动、安全地转换为指定的 Java 对象</strong>。</p><h5 id="4-5-1-BeanOutputConverter-简单提取Json文本数据"><a href="#4-5-1-BeanOutputConverter-简单提取Json文本数据" class="headerlink" title="4.5.1 BeanOutputConverter 简单提取Json文本数据"></a>4.5.1 <code>BeanOutputConverter</code> 简单提取Json文本数据</h5><p>假设我们希望 AI 从一段简历描述中，提取出候选人的姓名、工作年限和技能列表，并封装到一个 <code>Candidate</code> DTO (Data Transfer Object) 中。</p><p><strong>第一步：定义数据模型 (<code>Candidate.java</code>)</strong></p><p>在这之前我们讲解两个核心的知识点</p><p>1.<code>var</code> 是 Java 10 引入的一个重要特性，它被称为**局部变量类型推断 **。</p><p><strong>1. 传统方式（没有 <code>var</code>）</strong></p><p>在处理复杂的泛型类型时，代码会显得非常冗长和重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左边写了一长串类型，右边又写了一遍</span></span><br><span class="line">BeanOutputConverter&lt;Candidate&gt; candidateBeanOutputConverter = <span class="keyword">new</span> <span class="title class_">BeanOutputConverter</span>&lt;&gt;(Candidate.class);</span><br></pre></td></tr></table></figure><p><strong>2. 使用 <code>var</code> 的现代方式</strong></p><p>编译器会帮我们自动推断类型，代码变得极其简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">OutputConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanOutputConverter</span>&lt;&gt;(Candidate.class);</span><br></pre></td></tr></table></figure><p>2.使用 Java 17 的 <code>record</code> 关键字可以极大地简化代码</p><p>让我们通过一个 <code>Person</code> 类的例子，来直观地感受一下 <code>record</code> 带来的巨大便利。</p><p><strong>1. 在没有 <code>record</code> 之前 (传统方式)</strong></p><p>我们需要写下面这么多代码，才能创建一个功能完备、不可变的数据类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TraditionalPerson.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TraditionalPerson</span> &#123; <span class="comment">// final 保证不可继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">// private final 保证不可变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TraditionalPerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">TraditionalPerson</span> <span class="variable">that</span> <span class="operator">=</span> (TraditionalPerson) o;</span><br><span class="line">        <span class="keyword">return</span> age == that.age &amp;&amp; Objects.equals(name, that.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TraditionalPerson[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>2. 有了 <code>record</code> 之后 (现代方式)</strong></p><p>现在，使用 <code>record</code> 关键字，我们可以用<strong>一行代码</strong>实现与上面完全相同的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>现在，我们在 <code>com.example.hellospringai</code> 包下创建一个新的 <code>dto</code> 包，并在其中定义我们的数据传输对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径: src/main/java/com/example/hellospringai/dto/Candidate.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Candidate</span><span class="params">(</span></span><br><span class="line"><span class="params">        String name, // 候选者名称</span></span><br><span class="line"><span class="params">        <span class="type">int</span> yearsOfExperience, // 工作经验</span></span><br><span class="line"><span class="params">        List&lt;String&gt; skills // 技能</span></span><br><span class="line"><span class="params">)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：创建解析服务 (<code>ExtractionService.java</code>)</strong></p><p>接下来，在 <code>service</code> 包中创建一个新服务，该服务封装了调用 AI 进行信息提取的核心逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径: src/main/java/com/example/hellospringai/service/ExtractionService.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.dto.Candidate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.prompt.Prompt;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.prompt.Prompt;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.prompt.PromptTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.converter.BeanOutputConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractionService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExtractionService</span><span class="params">(ChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Candidate <span class="title function_">extractCandidateFrom</span><span class="params">(String resumeText)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个 BeanOutputConverter 实例，传入目标 DTO 的 Class</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">OutputConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanOutputConverter</span>&lt;&gt;(Candidate.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取格式化指令。这会生成一段文本，指导 AI 如何格式化其 JSON 输出。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatInstructions</span> <span class="operator">=</span> OutputConverter.getFormat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 将格式化指令整合到我们的 PromptTemplate 中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">promptTemplateString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                从下面的简历文本中提取信息。</span></span><br><span class="line"><span class="string">                &#123;format&#125;</span></span><br><span class="line"><span class="string">                简历文本:</span></span><br><span class="line"><span class="string">                &#123;resume&#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        <span class="type">PromptTemplate</span> <span class="variable">promptTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PromptTemplate</span>(promptTemplateString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 渲染 Prompt，传入简历文本和格式化指令</span></span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> promptTemplate.create(Map.of(</span><br><span class="line">                <span class="string">&quot;resume&quot;</span>, resumeText,</span><br><span class="line">                <span class="string">&quot;format&quot;</span>, formatInstructions</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 调用 ChatClient，并直接使用 OutputConverter 解析响应</span></span><br><span class="line">        <span class="comment">// .call().entity() 是一个便捷方法，它会调用AI并自动使用我们提供的解析器</span></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt(prompt)</span><br><span class="line">                .call()</span><br><span class="line">                .entity(OutputConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>代码优化点</strong>：<br>在最新版本的 Spring AI 中，我们可以使用更简洁的 <code>.call().entity(outputParser)</code> 链式调用，它等同于您笔记中的 <code>.call()</code> 后再手动 <code>.parse()</code>，但代码更具可读性。</p></blockquote><p><strong>第三步：创建 API 端点 (<code>ExtractionController.java</code>)</strong></p><p>为了能通过 HTTP 请求使用我们的解析服务，我们在 <code>controller</code> 包中创建一个新的控制器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径: src/main/java/com/example/hellospringai/controller/ExtractionController.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.dto.Candidate;</span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.service.ExtractionService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExtractionService extractionService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExtractionController</span><span class="params">(ExtractionService extractionService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.extractionService = extractionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/extract&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Candidate <span class="title function_">extractData</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resumeText</span> <span class="operator">=</span> request.get(<span class="string">&quot;resumeText&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> extractionService.extractCandidateFrom(resumeText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四步：运行与测试</strong></p><ol><li>启动您的 Spring Boot 应用。</li><li>使用 <code>curl</code> 或任何 API 测试工具，向 <code>/ai/extract</code> 端点发送一个 <code>POST</code> 请求。</li></ol><p><strong><code>curl</code> 命令示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/ai/extract -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&quot;&#123;\&quot;resumeText\&quot;: \&quot;张三是一名资深软件工程师，拥有超过8年的Java开发经验。他精通Spring Boot, Microservices, 和 Docker技术。\&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>预期 JSON 响应：</strong><br>您将会收到一个由 Spring Boot 自动序列化后的、结构清晰的 <code>Candidate</code> JSON 对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;yearsOfExperence&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Spring Boot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Microservices&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Docker&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>BeanOutputConverter</code> 的价值</strong>：它不仅仅是 JSON 解析器。它在 Prompt 和解析之间建立了一座桥梁，通过在 Prompt 中注入格式指令，极大地提高了模型输出结构化数据的<strong>可靠性和稳定性</strong>。这是构建生产级、可依赖的 AI 应用不可或缺的一环。</p></blockquote><p>除了 <code>BeanOutputConverter</code>，Spring AI 还提供了 <code>MapOutputConverter</code>（将输出解析为 <code>Map&lt;String, Object&gt;</code>）和 <code>ListOutputConverter</code>（将输出解析为 <code>List&lt;String&gt;</code>），以适应不同的场景需求</p><hr><h5 id="4-5-2-ListOutputParser-提取为字符串列表"><a href="#4-5-2-ListOutputParser-提取为字符串列表" class="headerlink" title="4.5.2 ListOutputParser: 提取为字符串列表"></a>4.5.2 <code>ListOutputParser</code>: 提取为字符串列表</h5><p>当您只需要从文本中提取一个简单的列表时（例如，所有的技能、所有的城市名），<code>ListOutputParser</code> 是最便捷的选择。</p><p><strong>第一步：在 <code>ExtractionService.java</code> 中添加新方法</strong></p><p>我们将添加一个 <code>extractSkillsToList</code> 方法，它只提取技能列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 ExtractionService.java 中添加此方法</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.parser.ListOutputParser; <span class="comment">// 新增 import</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.support.DefaultConversionService; <span class="comment">// 新增 import</span></span><br><span class="line"><span class="comment">// ... 其他 import</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractionService</span> &#123;</span><br><span class="line">    <span class="comment">// ... 已有代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">extractSkillsToList</span><span class="params">(String resumeText)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. ListOutputParser 需要一个 ConversionService，我们使用默认的即可</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">outputParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListOutputParser</span>(<span class="keyword">new</span> <span class="title class_">DefaultConversionService</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 它的格式化指令非常简单，会告诉AI返回一个逗号分隔的列表</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatInstructions</span> <span class="operator">=</span> outputParser.getFormat();</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">promptTemplateString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                从下面的文本中，只列出提到的所有技术技能。</span></span><br><span class="line"><span class="string">                &#123;format&#125;</span></span><br><span class="line"><span class="string">                文本: &#123;resume&#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        <span class="type">PromptTemplate</span> <span class="variable">promptTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PromptTemplate</span>(promptTemplateString);</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> promptTemplate.create(Map.of(</span><br><span class="line">                <span class="string">&quot;resume&quot;</span>, resumeText,</span><br><span class="line">                <span class="string">&quot;format&quot;</span>, formatInstructions</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt(prompt)</span><br><span class="line">                .call()</span><br><span class="line">                .entity(outputParser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：在 <code>ExtractionController.java</code> 中添加新端点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 ExtractionController.java 中添加此方法</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List; <span class="comment">// 新增 import</span></span><br><span class="line"><span class="comment">// ... 其他 import</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractionController</span> &#123;</span><br><span class="line">    <span class="comment">// ... 已有代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/skills-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">extractSkills</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resumeText</span> <span class="operator">=</span> request.get(<span class="string">&quot;resumeText&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> extractionService.extractSkillsToList(resumeText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步：测试 <code>ListOutputParser</code></strong></p><p>使用 <code>postman</code> 测试新端点：</p><p><a href="http://localhost:8080/ai/skills-list">http://localhost:8080/ai/skills-list</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;resumeText&quot;</span>: <span class="string">&quot;张三是一名资深软件工程师，拥有超过8年的Java开发经验。他精通Spring Boot, Microservices, 和 Docker技术。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>预期 JSON 响应：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Spring Boot&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Microservices&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Docker&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><hr><h5 id="4-5-3-MapOutputParser-提取为键值对-Map"><a href="#4-5-3-MapOutputParser-提取为键值对-Map" class="headerlink" title="4.5.3 MapOutputParser: 提取为键值对 Map"></a>4.5.3 <code>MapOutputParser</code>: 提取为键值对 Map</h5><p>当您需要提取一组不固定的键值对，或者不想为此专门创建一个Java类时，<code>MapOutputParser</code> 非常有用。</p><p><strong>第一步：在 <code>ExtractionService.java</code> 中添加新方法</strong></p><p>我们将添加一个 <code>extractFactsToMap</code> 方法，用于提取关于一个主题的几个关键事实。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 ExtractionService.java 中添加此方法</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.parser.MapOutputParser; <span class="comment">// 新增 import</span></span><br><span class="line"><span class="comment">// ... 其他 import</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractionService</span> &#123;</span><br><span class="line">    <span class="comment">// ... 已有代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">extractFactsToMap</span><span class="params">(String topic)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">outputParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapOutputConverter</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatInstructions</span> <span class="operator">=</span> outputParser.getFormat();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">promptTemplateString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                请提供关于 &quot;&#123;topic&#125;&quot; 的三个有趣的事实，必须以中文回复</span></span><br><span class="line"><span class="string">                &#123;format&#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        <span class="type">PromptTemplate</span> <span class="variable">promptTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PromptTemplate</span>(promptTemplateString);</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> promptTemplate.create(Map.of(</span><br><span class="line">                <span class="string">&quot;topic&quot;</span>, topic,</span><br><span class="line">                <span class="string">&quot;format&quot;</span>, formatInstructions</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt(prompt)</span><br><span class="line">                .call()</span><br><span class="line">                .entity(outputParser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：在 <code>ExtractionController.java</code> 中添加新端点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 ExtractionController.java 中添加此方法</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"><span class="comment">// ... 其他 import</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractionController</span> &#123;</span><br><span class="line">    <span class="comment">// ... 已有代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/facts-map&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">extractFacts</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> request.get(<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> extractionService.extractFactsToMap(topic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步：测试 <code>MapOutputParser</code></strong></p><p>使用 <code>post</code> 命令测试新端点：</p><p><a href="http://localhost:8080/ai/facts-map">http://localhost:8080/ai/facts-map</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;程序员笑话&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>预期 JSON 响应 (内容可能不同)：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;程序员最喜欢的节日是&#x27;1024程序员节&#x27;，因为1024在计算机中是2的10次方，象征着程序员的世界。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;有一个经典的笑话：为什么程序员总是分不清万圣节和圣诞节？因为Oct 31 == Dec 25（八进制31等于十进制25）。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;程序员最讨厌的动物是Bug，因为它们总是在最不合适的时候出现，而且很难彻底清除。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>通过这三个解析器的实战，我们已经掌握了让AI以可预测、可靠的结构化格式返回数据的核心技巧，这是构建生产级AI应用不可或缺的一环。</p><p>掌握了本章的内容，你已经从一个只会简单提问的 AI 用户，成长为一名懂得如何通过精心设计的 Prompt 来指挥和驾驭 AI 的“工程师”。这是从“使用 AI”到“构建 AI 应用”的关键一步。</p></div>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java微服务-AI篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务三：对话核心 API 深度解析</title>
      <link href="/posts/36722.html"/>
      <url>/posts/36722.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="3-对话核心-API-深度解析"><a href="#3-对话核心-API-深度解析" class="headerlink" title="3. 对话核心 API 深度解析"></a>3. 对话核心 API 深度解析</h2><blockquote><p>**重点说明：**该教程前端部分无需细扣，真正的前端实战会在后面，目前的前端功能直接复制过去，没有必要去读源码，明白后端如何调用前端即可，因为目前的前端还不够规范！仅为示例！！</p></blockquote><p>在快速入门章节中，我们已经初步体验了 <code>ChatClient</code> 的便捷。现在，是时候深入水面之下，探索 Spring AI 设计的基石——核心抽象 API。Spring AI 的“可移植性”设计哲学，正是通过这层优雅的抽象实现的。无论你面对的是 OpenAI、Azure、Ollama 还是未来的任何新模型，你的业务代码始终与一套稳定、统一的接口对话。本章，我将带你逐一解构这些核心接口：<code>ChatClient</code>, <code>ImageClient</code>, 和 <code>EmbeddingClient</code>。</p><h3 id="3-1-ChatClient-对话的核心枢纽"><a href="#3-1-ChatClient-对话的核心枢纽" class="headerlink" title="3.1 ChatClient: 对话的核心枢纽"></a>3.1 <code>ChatClient</code>: 对话的核心枢纽</h3><p><code>ChatClient</code> 是你与大语言模型（LLM）进行对话交互的唯一入口。它将底层不同厂商 API 的复杂性（如不同的认证方式、请求&#x2F;响应格式、错误处理）完全封装，为你提供了一个极其简洁和统一的编程模型。</p><p>它的核心职责是：发送一个包含上下文和指令的 <code>Prompt</code>，并接收模型生成的 <code>ChatResponse</code>。这个过程可以通过两种方式完成：同步 (<code>call</code>) 和流式 (<code>stream</code>)。</p><h4 id="3-1-1-call-vs-stream-同步与流式的抉择"><a href="#3-1-1-call-vs-stream-同步与流式的抉择" class="headerlink" title="3.1.1 call() vs. stream(): 同步与流式的抉择"></a>3.1.1 <code>call()</code> vs. <code>stream()</code>: 同步与流式的抉择</h4><p><code>call()</code> 和 <code>stream()</code> 方法是 <code>ChatClient</code> 的两个主要动作，它们服务于不同的交互场景。</p><ul><li><strong><code>call()</code> (同步调用)</strong>: 这是最直接的方式。你的应用发送请求后会一直等待，直到模型生成完整的响应后一次性返回。它简单、易于处理，适用于那些不需要实时反馈、可以接受短暂等待的场景。</li><li><strong><code>stream()</code> (流式调用)</strong>: 这种方式会立即返回一个 <code>Flux&lt;ChatResponse&gt;</code>（来自 Project Reactor 的响应式流）。模型会像打字机一样，逐个 Token（可以理解为单词或字符块）地将内容推送回来。你的应用可以实时接收并处理这些数据片段。这极大地提升了用户体验，尤其是在构建交互式聊天机器人时。</li></ul><p>下表清晰地对比了两种方法的差异：</p><table><thead><tr><th align="left">特性</th><th align="left"><code>.call()</code> 方法</th><th align="left"><code>.stream()</code> 方法</th></tr></thead><tbody><tr><td align="left"><strong>方法签名</strong></td><td align="left"><code>ChatResponse call(Prompt prompt)</code></td><td align="left"><code>Flux&lt;ChatResponse&gt; stream(Prompt prompt)</code></td></tr><tr><td align="left"><strong>返回类型</strong></td><td align="left"><code>ChatResponse</code> (单个响应对象)</td><td align="left"><code>Flux&lt;ChatResponse&gt;</code> (响应式数据流)</td></tr><tr><td align="left"><strong>执行模式</strong></td><td align="left">同步阻塞</td><td align="left">异步非阻塞</td></tr><tr><td align="left"><strong>数据返回</strong></td><td align="left">一次性返回完整内容</td><td align="left">逐步、分块返回内容</td></tr><tr><td align="left"><strong>典型用例</strong></td><td align="left">- 后台任务处理（如生成报告、总结邮件）<br>- API 中简单的问答<br>- 数据提取与转换</td><td align="left">- 交互式聊天机器人界面（打字机效果）<br>- 需要处理长文本响应的应用<br>- 对实时性要求高的场景</td></tr><tr><td align="left"><strong>编程模型</strong></td><td align="left">传统命令式编程</td><td align="left">响应式编程 (Reactive)</td></tr></tbody></table><h4 id="3-1-2-ChatClient-实战代码"><a href="#3-1-2-ChatClient-实战代码" class="headerlink" title="3.1.2 ChatClient 实战代码"></a>3.1.2 <code>ChatClient</code> 实战代码</h4><p>让我们通过一个简单的例子，看看如何在代码中使用 <code>ChatClient</code>。我们定义一个新的包<code>service</code>，通过Controller来调用<code>ChatService</code>，它既能提供一次性的答案，也能提供流式输出，在这之前我们有必要说明一下我们接下来会用到的两个方法，分别是<code>chatResponse()</code>和<code>content()</code>的区别</p><p>我用一个表格来清晰地展示它们的区别：</p><table><thead><tr><th align="left">特性 (Feature)</th><th align="left"><code>.stream().content()</code></th><th align="left"><code>.stream().chatResponse()</code></th></tr></thead><tbody><tr><td align="left"><strong>返回类型</strong></td><td align="left"><code>Flux&lt;String&gt;</code></td><td align="left"><code>Flux&lt;ChatResponse&gt;</code></td></tr><tr><td align="left"><strong>流中内容</strong></td><td align="left">纯文本字符串片段 (<code>String</code>)。例如：<code>&quot;今天&quot;</code>、<code>&quot;天气&quot;</code>、<code>&quot;不错&quot;</code>。</td><td align="left">完整的响应对象 (<code>ChatResponse</code>)。</td></tr><tr><td align="left"><strong>信息丰富度</strong></td><td align="left"><strong>基础</strong>：只包含AI生成的文字。</td><td align="left"><strong>丰富</strong>：每个 <code>ChatResponse</code> 对象都包含：1.AI生成的文本片段 2.Token消耗信息 (实时或最终)3.对话结束原因 (<code>finishReason</code>) 4.模型ID等其他元数据</td></tr><tr><td align="left"><strong>性能开销</strong></td><td align="left"><strong>极低</strong>：网络传输和内存占用都最小，只传递最必要的信息。</td><td align="left"><strong>略高</strong>：传输的数据包更大，因为包含了元数据，需要创建更多Java对象。</td></tr><tr><td align="left"><strong>适用场景</strong></td><td align="left"><strong>绝大多数场景</strong>。例如，在前端像打字机一样流式显示AI的回答。</td><td align="left"><strong>高级或需要监控的场景</strong>。例如：&lt;br&gt; - 你需要实时计算和显示Token消耗。&lt;br&gt; - 你需要根据<code>finishReason</code>判断对话是因为内容生成完毕(<code>stop</code>)还是因为达到了长度限制(<code>length</code>)而结束。</td></tr></tbody></table><ul><li>如果你<strong>只关心AI说了什么</strong>，那么使用 <strong><code>.content()</code></strong>。它最简单、最高效，能满足90%的需求。</li><li>如果你不仅关心AI说了什么，还<strong>关心它“是怎么说的”</strong>（比如消耗了多少资源、为什么停止等），那么使用 <strong><code>.chatResponse()</code></strong>。</li></ul><p>对于前端流式打字机效果，<code>.content()</code> 是完美的选择。对于需要精细控制或监控的后端服务，<code>.chatResponse()</code> 则提供了更强大的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入由 Spring Boot 自动配置好的 ChatClient.Builder</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatService</span><span class="params">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步调用示例：一次性获取 AI 的完整回答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 用户的提问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AI 生成的完整文本内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSimpleResponse</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">// .prompt() 是一个便捷的流式 API 入口，用于快速构建和发送请求</span></span><br><span class="line">        <span class="comment">// .user() 指定了用户角色的消息</span></span><br><span class="line">        <span class="comment">// .call() 发起同步调用</span></span><br><span class="line">        <span class="comment">// .content() 是一个快捷方法，用于直接从 ChatResponse 中提取文本内容</span></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .call()</span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式调用示例：返回一个可以逐块消费的响应流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 用户的提问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含 ChatResponse 片段的 Flux 流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">getStreamResponse</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">// .stream() 发起流式调用，它会立即返回一个 Flux 对象</span></span><br><span class="line">        <span class="comment">// 调用者可以订阅这个 Flux 来处理陆续到达的数据</span></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .stream()</span><br><span class="line">                .chatResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式内容调用：返回纯文本内容的响应流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 用户的提问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含文本内容片段的 Flux 流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">getStreamContent</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .stream()</span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于**<code>ChatController.java</code>**我们进行如下的改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.service.ChatService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatService chatService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(ChatService chatService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatService = chatService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个 GET 请求接口，以现代、响应式的方式流式输出 AI 回答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收来自 URL 的查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含 AI 回答文本块的响应式数据流 (Flux)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/chat&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span> <span class="comment">// 这里必须指定编码，否则中文将无法正确编码</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">streamChat</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;你是谁？&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 ChatService 处理流式聊天请求</span></span><br><span class="line">        <span class="keyword">return</span> chatService.getStreamContent(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步聊天接口，一次性返回完整的 AI 回答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收来自 URL 的查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AI 生成的完整文本内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/chat-sync&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">syncChat</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;你是谁？&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 ChatService 处理同步聊天请求</span></span><br><span class="line">        <span class="keyword">return</span> chatService.getSimpleResponse(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式聊天接口，返回包含更多元数据的 ChatResponse 流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收来自 URL 的查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含 ChatResponse 对象的响应式数据流 (Flux)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/chat-response&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">streamChatResponse</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;你是谁？&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 ChatService 处理流式 ChatResponse 请求</span></span><br><span class="line">        <span class="keyword">return</span> chatService.getStreamResponse(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-小结：如何访问和测试API"><a href="#3-1-3-小结：如何访问和测试API" class="headerlink" title="3.1.3 小结：如何访问和测试API"></a>3.1.3 小结：如何访问和测试API</h4><p>现在我们已经定义好了 <code>ChatService</code> 业务类和 <code>ChatController</code> 控制器，一个功能完备的AI聊天后端服务就绪了。启动你的 <code>HelloSpringAiApplication</code> 主应用类，接下来，我将指导你如何通过常见的工具访问我们创建的三个API接口。</p><p>测试这些接口最便捷的工具是你的<strong>网页浏览器</strong>和命令行工具 <strong><code>curl</code></strong>。</p><p>下表总结了每个接口的访问方式和预期效果：</p><table><thead><tr><th align="left">接口功能</th><th align="left">访问 URL 示例</th><th align="left">推荐测试方法</th><th align="left">预期输出</th></tr></thead><tbody><tr><td align="left"><strong>流式返回纯文本</strong>&lt;br&gt;(打字机效果)</td><td align="left"><code>http://localhost:8080/ai/chat?message=你好世界</code></td><td align="left"><strong>浏览器</strong>或 <strong><code>curl -N</code></strong></td><td align="left">纯文本的流式输出，文字会像打字机一样逐个出现。</td></tr><tr><td align="left"><strong>同步返回完整文本</strong></td><td align="left"><code>http://localhost:8080/ai/chat-sync?message=你好世界</code></td><td align="left"><strong>浏览器</strong>或 <strong><code>curl</code></strong></td><td align="left">等待片刻后，浏览器页面上一次性显示完整的AI回复文本。</td></tr><tr><td align="left"><strong>流式返回JSON对象</strong></td><td align="left"><code>http://localhost:8080/ai/chat-response?message=你好世界</code></td><td align="left"><strong><code>curl -N</code></strong></td><td align="left">连续的JSON对象流。每个对象都是一个<code>ChatResponse</code>的内容。</td></tr></tbody></table><ol><li><p><strong>测试流式文本接口 (<code>/ai/chat</code>)</strong></p><ul><li><strong>浏览器</strong>：这是最直观的方式。直接在浏览器地址栏输入 <code>http://localhost:8080/ai/chat?message=请介绍一下长城</code> 并回车。你会看到浏览器的加载动画会持续旋转，同时页面上的文字会不断地动态增加，直到AI回答完毕。</li><li><strong>curl</strong>：在你的命令行终端中输入以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -N <span class="string">&quot;http://localhost:8080/ai/chat?message=请介绍一下长城&quot;</span></span><br></pre></td></tr></table></figure><code> -N</code> 参数告诉 <code>curl</code> 不要使用缓冲，立刻将接收到的数据显示在终端上，你将看到文字逐行或逐块打印出来。</li></ul></li><li><p><strong>测试同步文本接口 (<code>/ai/chat-sync</code>)</strong></p><ul><li><strong>浏览器</strong>：在地址栏输入 <code>http://localhost:8080/ai/chat-sync?message=中国的首都是哪里</code>。页面会加载一小会儿，然后一次性显示出完整答案，例如“中国的首都是北京。”。</li><li><strong>curl</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://localhost:8080/ai/chat-sync?message=中国的首都是哪里&quot;</span></span><br></pre></td></tr></table></figure>终端会等待几秒，然后直接打印出完整的回复。</li></ul></li><li><p><strong>测试流式JSON接口 (<code>/ai/chat-response</code>)</strong></p><ul><li><strong>浏览器</strong>：不推荐使用浏览器直接访问这个接口。由于返回的是 <code>application/json</code> 的事件流，大多数浏览器会尝试下载一个文件，或者无法正确地渲染持续到来的JSON对象。</li><li><strong>curl</strong>：这是观察其原始输出的最佳方式。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -N <span class="string">&quot;http://localhost:8080/ai/chat-response?message=你好&quot;</span></span><br></pre></td></tr></table></figure>你会在终端看到一系列连续输出的JSON对象，每个对象之间可能有换行。每一个对象都是一个独立的 <code>ChatResponse</code> 序列化后的结果，格式可能如下所示：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;generation&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;你&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;finishReason&quot;</span><span class="punctuation">:</span><span class="string">&quot;STOP&quot;</span><span class="punctuation">,</span><span class="attr">&quot;usage&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;promptTokens&quot;</span><span class="punctuation">:</span><span class="number">11</span><span class="punctuation">,</span><span class="attr">&quot;completionTokens&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;totalTokens&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;generation&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;好&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;finishReason&quot;</span><span class="punctuation">:</span><span class="string">&quot;STOP&quot;</span><span class="punctuation">,</span><span class="attr">&quot;usage&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;promptTokens&quot;</span><span class="punctuation">:</span><span class="number">11</span><span class="punctuation">,</span><span class="attr">&quot;completionTokens&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;totalTokens&quot;</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>通过以上方法，你可以清晰地观察到同步与流式、返回纯文本与返回完整响应对象之间的差异。建议你亲自尝试，并使用浏览器的开发者工具（F12 -&gt; Network标签页）来观察不同请求的响应头（Headers）和响应体（Response），这会让你对HTTP协议和API设计有更深刻的理解。</p><hr><h3 id="3-2-调试与洞察：Advisor-与日志"><a href="#3-2-调试与洞察：Advisor-与日志" class="headerlink" title="3.2 调试与洞察：Advisor 与日志"></a><strong>3.2 调试与洞察：<code>Advisor</code> 与日志</strong></h3><p>到目前为止，我们已经构建了功能强大的 <code>ChatClient</code>。但当AI的回答不符合预期时，我们如何知道发送给模型的完整提示（Prompt）到底是什么样的？例如，我们通过 <code>.defaultSystem()</code> 配置的全局指令，是如何与我们当前的用户问题组合在一起的？</p><p>为了解决这个“黑盒”问题，Spring AI 提供了 **<code>Advisor</code>（顾问）**机制。</p><p><code>Advisor</code> 就像是安装在 <code>ChatClient</code> 请求&#x2F;响应链路上的“拦截器”或“中间件”。它允许我们在请求发送给AI之前对其进行修改或审查，并在收到AI响应后进行处理。Spring AI 提供了一些非常有用的内置顾问，本节我们将学习其中用于调试的：<strong><code>SimpleLoggerAdvisor</code></strong>。</p><p><code>SimpleLoggerAdvisor</code> 是一个专门用于<strong>调试</strong>的工具。它的唯一职责就是将发送给大语言模型的<strong>最终请求（完整Prompt）<strong>和从模型那里收到的</strong>原始响应</strong>，以<code>DEBUG</code>或<code>TRACE</code>级别打印到控制台日志中。</p><p>这为我们提供了一个强大的“窥镜”，可以清晰地看到每一次交互的全部细节。</p><p><strong>1. 在项目中引入日志顾问</strong></p><p>要使用 <code>SimpleLoggerAdvisor</code>，我们需要完成两步配置。</p><p><strong>第一步：启用 DEBUG 日志</strong></p><p>我们需要告诉 Spring Boot 的日志系统，我们希望看到来自 <code>advisor</code> 的详细调试信息。</p><p>在 <code>application.yml</code> 文件中添加 <code>logging.level</code> 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># src/main/resources/application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">ai:</span></span><br><span class="line">    <span class="attr">openai:</span></span><br><span class="line">      <span class="attr">base-url:</span> <span class="string">https://api.deepseek.com</span></span><br><span class="line">      <span class="attr">api-key:</span> <span class="string">&quot;sk-xxxx&quot;</span></span><br><span class="line">      <span class="attr">chat:</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">model:</span> <span class="string">deepseek-chat</span></span><br><span class="line">          <span class="attr">temperature:</span> <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增：配置日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># 将 advisor 包的日志级别设为 DEBUG，以激活 SimpleLoggerAdvisor 的输出</span></span><br><span class="line">    <span class="attr">org.springframework.ai.chat.client.advisor:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="comment"># 同时将我们自己应用的包也设为 DEBUG，方便观察</span></span><br><span class="line">    <span class="attr">com.example.hellospringai:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p><strong>第二步：在 <code>ChatClient</code> 中配置日志顾问</strong></p><p>接下来，我们修改 <code>CommonConfiguration.java</code>，在构建 <code>ChatClient</code> 时，将 <code>SimpleLoggerAdvisor</code> 作为默认顾问添加进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径: src/main/java/com/example/hellospringai/config/CommonConfiguration.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatClient <span class="title function_">chatClient</span><span class="params">(ChatModel chatModel)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChatClient.builder(chatModel)</span><br><span class="line">                .defaultSystem(<span class="string">&quot;你是一个由Prorise创作出来的AI大模型，名字叫做小P，请你在以后的回复中以新的身份和语气回复我&quot;</span>)</span><br><span class="line">                <span class="comment">// 关键：将 SimpleLoggerAdvisor 添加为默认顾问</span></span><br><span class="line">                .defaultAdvisors(<span class="keyword">new</span> <span class="title class_">SimpleLoggerAdvisor</span>())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 观察日志输出</strong></p><p>完成以上配置并重启应用后，调用任一聊天接口，例如访问 <code>http://localhost:8080/ai/chat?message=你好</code>。</p><p>现在，请观察您的IDE控制台，您会看到类似下面这样的详细 <code>DEBUG</code> 日志输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DEBUG --- [nio-8080-exec-1] o.s.a.c.c.a.SimpleLoggerAdvisor        : </span><br><span class="line">--- Request:</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;messageType&quot;: &quot;SYSTEM&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;你是一个由Prorise创作出来的AI大模型，名字叫做小P，请你在以后的回复中以新的身份和语气回复我&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;messageType&quot;: &quot;USER&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;你好&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">--- Response:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;messageType&quot;: &quot;ASSISTANT&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;你好！我是小P，很高兴能为您服务。有什么可以帮助您的吗？&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>日志解读：</strong></p><ul><li><strong><code>--- Request:</code></strong>: 这部分清晰地展示了最终发送给大语言模型的完整消息列表。我们可以清楚地看到，我们配置的 <code>defaultSystem</code> 系统提示和用户的 <code>你好</code> 被正确地组合在了一起。</li><li><strong><code>--- Response:</code></strong>: 这部分展示了AI模型返回的原始<code>Assistant</code>消息内容。</li></ul><p>通过 <code>SimpleLoggerAdvisor</code>，我们获得了对 <code>ChatClient</code> 内部通信的完全可见性，这在进行 Prompt Engineering（提示词工程）和问题排查时是不可或缺的利器。</p><hr><h3 id="3-3-前端环境搭建"><a href="#3-3-前端环境搭建" class="headerlink" title="3.3 前端环境搭建"></a>3.3 前端环境搭建</h3><p>本节将快速搭建一个基于 <strong>Vue 3 + Vite + Tailwind CSS + DaisyUI + Element Plus</strong> 的前端开发环境。</p><h4 id="3-3-1-初始化-Vue-3-项目"><a href="#3-3-1-初始化-Vue-3-项目" class="headerlink" title="3.3.1 初始化 Vue 3 项目"></a>3.3.1 初始化 Vue 3 项目</h4><p>首先，使用 Vite 和 pnpm 创建并初始化项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 使用 Vite 创建项目</span></span><br><span class="line">pnpm create vite spring-app --template vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 进入目录并安装基础依赖</span></span><br><span class="line"><span class="built_in">cd</span> spring-app</span><br><span class="line">pnpm install</span><br></pre></td></tr></table></figure><h4 id="3-3-2-集成-Tailwind-CSS"><a href="#3-3-2-集成-Tailwind-CSS" class="headerlink" title="3.3.2 集成 Tailwind CSS"></a>3.3.2 集成 Tailwind CSS</h4><p>接下来，为项目添加 Tailwind CSS 并完成基础配置。</p><p><strong>1. 安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D tailwindcss@3.4.1 postcss autoprefixer</span><br></pre></td></tr></table></figure><p><strong>2. 生成配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><p><strong>3. 更新配置与样式文件</strong></p><ul><li><strong><code>tailwind.config.js</code></strong>:  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&quot;./index.html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><code>src/assets/style/main.css</code></strong> (如果目录不存在请创建):  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-3-3-集成-UI-组件库-DaisyUI-Element-Plus"><a href="#3-3-3-集成-UI-组件库-DaisyUI-Element-Plus" class="headerlink" title="3.3.3 集成 UI 组件库 (DaisyUI &amp; Element Plus)"></a>3.3.3 集成 UI 组件库 (DaisyUI &amp; Element Plus)</h4><p><strong>1. 安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 DaisyUI 作为开发依赖</span></span><br><span class="line">pnpm add -D daisyui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Element Plus 作为生产依赖</span></span><br><span class="line">pnpm add element-plus</span><br></pre></td></tr></table></figure><p><strong>2. 在 <code>tailwind.config.js</code> 中启用 DaisyUI</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&quot;./index.html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;daisyui&#x27;</span>), <span class="comment">// 添加 DaisyUI 插件</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// (可选) DaisyUI 主题等配置</span></span><br><span class="line">  <span class="attr">daisyui</span>: &#123;</span><br><span class="line">    <span class="attr">themes</span>: [<span class="string">&quot;light&quot;</span>, <span class="string">&quot;dark&quot;</span>, <span class="string">&quot;cupcake&quot;</span>], <span class="comment">// 启用的主题列表，可按需选择</span></span><br><span class="line">    <span class="comment">// styled: true,         // DaisyUI 组件类是否默认应用 (默认为 true)</span></span><br><span class="line">    <span class="comment">// base: true,           // 是否应用 DaisyUI 基础样式 (默认为 true)</span></span><br><span class="line">    <span class="comment">// utils: true,          // 是否应用 DaisyUI 工具类 (默认为 true)</span></span><br><span class="line">    <span class="comment">// logs: true,           // 是否在控制台显示 DaisyUI 日志 (默认为 true)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-主程序入口配置-main-js"><a href="#3-3-4-主程序入口配置-main-js" class="headerlink" title="3.3.4 主程序入口配置 (main.js)"></a>3.3.4 主程序入口配置 (<code>main.js</code>)</h4><p>这是非常关键的一步。我们将更新 <code>src/main.js</code> 文件，它会<strong>同时引入 Tailwind CSS 的基础样式</strong>并<strong>全局注册 Element Plus 插件</strong>，确保所有功能都准备就绪。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/style/main.css&#x27;</span> <span class="comment">// 引入 tailwindcss 样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span> <span class="comment">// 引入 Element Plus 的 CSS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>) <span class="comment">// 注册 Element Plus 插件</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-4-阶段小实战：构建企业级AI对话界面"><a href="#3-4-阶段小实战：构建企业级AI对话界面" class="headerlink" title="3.4 阶段小实战：构建企业级AI对话界面"></a>3.4 阶段小实战：构建企业级AI对话界面</h3><p>在 <code>3.3</code> 的基础上，本节将通过安装专业级组件库、创建标准化的目录结构，并填充模块化的核心代码，一步步完整实现一个功能强大、结构清晰的聊天机器人前端应用，我们保持后端的代码简洁，如下</p><p><strong><code>ChatController.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.service.ChatService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatService chatService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(ChatService chatService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatService = chatService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个 GET 请求接口，以现代、响应式的方式流式输出 AI 回答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收来自 URL 的查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含 AI 回答文本块的响应式数据流 (Flux)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/chat&quot;, produces = &quot;text/event-stream;charset=utf-8&quot;)</span> <span class="comment">// 修改为流式响应格式</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">streamChat</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;你是谁？&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 ChatService 处理流式聊天请求</span></span><br><span class="line">        <span class="keyword">return</span> chatService.getStreamContent(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>ChatService.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatService</span><span class="params">(ChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式内容调用：返回纯文本内容的响应流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 用户的提问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含文本内容片段的 Flux 流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">getStreamContent</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .stream()</span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-1-核心依赖补全"><a href="#3-4-1-核心依赖补全" class="headerlink" title="3.4.1 核心依赖补全"></a>3.4.1 核心依赖补全</h4><p><code>3.2</code> 节中我们安装了基础UI库，现在我们需要补全应用逻辑所必需的核心库，包括状态管理、路由、工具函数以及本次实战的主角——专业的AI对话组件库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Pinia (状态管理), Axios (网络请求)</span></span><br><span class="line">pnpm install pinia axios</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Vue Router 和 VueUse (组合式函数工具库)</span></span><br><span class="line">pnpm add vue-router @vueuse/core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 vue-element-plus-x (提供高级AI对话组件)</span></span><br><span class="line">pnpm install vue-element-plus-x</span><br></pre></td></tr></table></figure><h4 id="3-3-2-项目目录结构创建"><a href="#3-3-2-项目目录结构创建" class="headerlink" title="3.3.2 项目目录结构创建"></a>3.3.2 项目目录结构创建</h4><p>一个良好、清晰的目录结构是大型项目的基石。在 <code>src</code> 目录下，执行以下命令创建我们规划好的所有子目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 src 目录下一次性创建所有规划好的文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> src/api, src/assets/style, src/components/common, src/composables, src/router, src/stores, src/utils, src/views</span><br></pre></td></tr></table></figure><p>执行后，你的 <code>src</code> 目录结构应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">├── api/</span><br><span class="line">├── assets/</span><br><span class="line">│   └── style/</span><br><span class="line">├── components/</span><br><span class="line">│   └── common/</span><br><span class="line">├── composables/</span><br><span class="line">├── router/</span><br><span class="line">├── stores/</span><br><span class="line">├── utils/</span><br><span class="line">└── views/</span><br></pre></td></tr></table></figure><h4 id="3-4-3-核心代码实现"><a href="#3-4-3-核心代码实现" class="headerlink" title="3.4.3 核心代码实现"></a>3.4.3 核心代码实现</h4><p>现在，我们按照从底层数据、逻辑到上层视图的顺序，依次填充每个文件。</p><h5 id="0-处理API请求（Axios）"><a href="#0-处理API请求（Axios）" class="headerlink" title="0.处理API请求（Axios）"></a>0.处理API请求（Axios）</h5><p><strong><code>/utils/request.js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, </span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><p><strong><code>/api/chat.js</code></strong></p><p>核心API接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以流式方式获取AI回答</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">message</span> - 用户消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;Response&gt;</span>&#125; 返回一个支持流式读取的 Response 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">streamChat</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用封装好的 axios 发送请求，通过 fetch 处理流式响应</span></span><br><span class="line">  <span class="comment">// 保持项目中请求方式的统一性</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;request.defaults.baseURL&#125;</span>/ai/chat?message=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(message)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/event-stream&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-状态管理层-Pinia"><a href="#1-状态管理层-Pinia" class="headerlink" title="1. 状态管理层 (Pinia)"></a><strong>1. 状态管理层 (Pinia)</strong></h5><p><code>src/stores/conversationStore.js</code> 文件负责以UI组件库（<code>vue-element-plus-x</code>）所需的标准格式来存储和管理对话数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个使用 Pinia 状态管理库创建的对话存储模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个名为 &#x27;conversation&#x27; 的状态存储，用于管理聊天对话的状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useConversationStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;conversation&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 定义存储的状态数据</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">messages</span>: [],       <span class="comment">// 存储BubbleList格式的消息数组</span></span><br><span class="line">    <span class="attr">nextMessageId</span>: <span class="number">0</span>,   <span class="comment">// 消息ID计数器</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义可以修改状态的操作方法</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加一条新消息到对话历史中</span></span><br><span class="line">    <span class="title function_">addMessage</span>(<span class="params">&#123; role, content = <span class="string">&#x27;&#x27;</span> &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> messageRole = role === <span class="string">&#x27;user&#x27;</span> ? <span class="string">&#x27;user&#x27;</span> : <span class="string">&#x27;ai&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> placement = messageRole === <span class="string">&#x27;ai&#x27;</span> ? <span class="string">&#x27;start&#x27;</span> : <span class="string">&#x27;end&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> variant = messageRole === <span class="string">&#x27;ai&#x27;</span> ? <span class="string">&#x27;filled&#x27;</span> : <span class="string">&#x27;outlined&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> avatar = messageRole === <span class="string">&#x27;ai&#x27;</span></span><br><span class="line">        ? <span class="string">&#x27;https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png&#x27;</span></span><br><span class="line">        : <span class="string">&#x27;https://avatars.githubusercontent.com/u/76239030?v=4&#x27;</span>;</span><br><span class="line">      <span class="comment">// 创建符合 BubbleList 组件要求的消息对象</span></span><br><span class="line">      <span class="keyword">const</span> bubbleMessage = &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="variable language_">this</span>.<span class="property">nextMessageId</span>++,         <span class="comment">// 唯一标识</span></span><br><span class="line">        <span class="attr">role</span>: messageRole,                 <span class="comment">// user | ai 角色定义</span></span><br><span class="line">        placement,                         <span class="comment">// start | end 气泡位置</span></span><br><span class="line">        content,                          <span class="comment">// 消息内容，流式接收时只需要改这个值即可</span></span><br><span class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,                   <span class="comment">// 当前气泡的加载状态</span></span><br><span class="line">        <span class="attr">shape</span>: <span class="string">&#x27;corner&#x27;</span>,                  <span class="comment">// 气泡的形状</span></span><br><span class="line">        variant,                          <span class="comment">// 气泡的样式</span></span><br><span class="line">        <span class="attr">isMarkdown</span>: <span class="literal">true</span>,                 <span class="comment">// 是否渲染为 markdown</span></span><br><span class="line">        <span class="attr">typing</span>: <span class="literal">false</span>,                    <span class="comment">// 是否开启打字器效果，该属性不会和流式接收冲突</span></span><br><span class="line">        <span class="attr">isFog</span>: messageRole === <span class="string">&#x27;ai&#x27;</span>,      <span class="comment">// 是否开启打字雾化效果，该效果 v1.1.6 新增，且在 typing 为 true 时生效，该效果会覆盖 typing 的 suffix 属性</span></span><br><span class="line">        avatar,                           <span class="comment">// 头像</span></span><br><span class="line">        <span class="attr">avatarSize</span>: <span class="string">&#x27;36px&#x27;</span>,               <span class="comment">// 头像占位大小</span></span><br><span class="line">        <span class="attr">avatarGap</span>: <span class="string">&#x27;12px&#x27;</span>,                <span class="comment">// 头像与气泡之间的距离</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(bubbleMessage);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向最后一条消息追加内容（用于流式接收AI回复）</span></span><br><span class="line">    <span class="title function_">appendToLastMessage</span>(<span class="params">contentChunk</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果没有消息则直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">messages</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取最后一条消息</span></span><br><span class="line">      <span class="keyword">const</span> lastMessage = <span class="variable language_">this</span>.<span class="property">messages</span>[<span class="variable language_">this</span>.<span class="property">messages</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 只有当最后一条消息是AI助手的回复时才追加内容</span></span><br><span class="line">      <span class="keyword">if</span> (lastMessage.<span class="property">role</span> === <span class="string">&#x27;ai&#x27;</span>) &#123;</span><br><span class="line">        lastMessage.<span class="property">content</span> += contentChunk;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空对话历史</span></span><br><span class="line">    <span class="title function_">clearHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">messages</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2-可组合函数-Composables"><a href="#2-可组合函数-Composables" class="headerlink" title="2. 可组合函数 (Composables)"></a><strong>2. 可组合函数 (Composables)</strong></h5><p>我们将不同的逻辑关注点分离到独立的 <code>composable</code> 函数中，以实现最大程度的复用和解耦。</p><ul><li><p><strong><code>src/composables/useChat.js</code></strong> (聊天核心逻辑)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> &#123; ref, watch, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123; useConversationStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/conversationStore&#x27;</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123; streamChat &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/chat&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useXStream &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-element-plus-x&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聊天核心逻辑 composable</span></span><br><span class="line"><span class="comment">     * 处理消息发送、流式接收、状态管理等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useChat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 状态管理</span></span><br><span class="line">        <span class="keyword">const</span> store = <span class="title function_">useConversationStore</span>();</span><br><span class="line">        <span class="keyword">const</span> &#123; messages &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 会话ID和输入消息</span></span><br><span class="line">        <span class="keyword">const</span> sessionId = <span class="title function_">ref</span>(<span class="string">`session_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">const</span> inputMessage = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 使用 useXStream 处理流式数据</span></span><br><span class="line">        <span class="keyword">const</span> &#123; startStream, cancel, isLoading, data, error &#125; = <span class="title function_">useXStream</span>();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 计算属性处理累积的流式数据</span></span><br><span class="line">        <span class="keyword">const</span> streamContent = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!data.<span class="property">value</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">let</span> text = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.<span class="property">value</span>.<span class="property">length</span>; index++) &#123;</span><br><span class="line">                <span class="keyword">const</span> chunk = data.<span class="property">value</span>[index];</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 检查chunk是否是对象且包含data属性</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">&#x27;object&#x27;</span> &amp;&amp; chunk !== <span class="literal">null</span> &amp;&amp; <span class="string">&#x27;data&#x27;</span> <span class="keyword">in</span> chunk) &#123;</span><br><span class="line">                        <span class="comment">// 只有当data不为空时才添加</span></span><br><span class="line">                        <span class="keyword">if</span> (chunk.<span class="property">data</span>) &#123;</span><br><span class="line">                            text += chunk.<span class="property">data</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 空data的chunk直接跳过，不打印警告</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                        text += chunk;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知的chunk格式:&#x27;</span>, chunk);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;解析流数据时出错:&#x27;</span>, error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 监听流式数据更新，实时追加到消息中</span></span><br><span class="line">        <span class="title function_">watch</span>(streamContent, <span class="function">(<span class="params">newContent, oldContent</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (newContent &amp;&amp; newContent !== oldContent) &#123;</span><br><span class="line">                <span class="comment">// 获取新增的内容部分</span></span><br><span class="line">                <span class="keyword">const</span> newChunk = newContent.<span class="title function_">slice</span>(oldContent?.<span class="property">length</span> || <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (newChunk) &#123;</span><br><span class="line">                    store.<span class="title function_">appendToLastMessage</span>(newChunk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 监听错误信息</span></span><br><span class="line">        <span class="title function_">watch</span>(error, <span class="function">(<span class="params">errorInfo</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (errorInfo) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;流式请求失败:&quot;</span>, errorInfo);</span><br><span class="line">                store.<span class="title function_">appendToLastMessage</span>(<span class="string">&quot;\n\n抱歉，处理您的请求时遇到了问题。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理用户提交消息</span></span><br><span class="line"><span class="comment">         * 使用 useXStream 处理流式接收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleUserSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> messageContent = inputMessage.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 验证输入</span></span><br><span class="line">            <span class="keyword">if</span> (!messageContent || isLoading.<span class="property">value</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 添加用户消息到对话历史</span></span><br><span class="line">                store.<span class="title function_">addMessage</span>(&#123;</span><br><span class="line">                    <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                    <span class="attr">content</span>: messageContent</span><br><span class="line">                &#125;);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 2. 清空输入框</span></span><br><span class="line">                inputMessage.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 3. 创建AI回复占位</span></span><br><span class="line">                store.<span class="title function_">addMessage</span>(&#123;</span><br><span class="line">                    <span class="attr">role</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">                    <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 4. 获取流式响应</span></span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">streamChat</span>(messageContent);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 5. 使用 useXStream 处理流式数据</span></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">startStream</span>(&#123;</span><br><span class="line">                    <span class="attr">readableStream</span>: response.<span class="property">body</span></span><br><span class="line">                &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;发起流式请求失败:&quot;</span>, err);</span><br><span class="line">                store.<span class="title function_">appendToLastMessage</span>(<span class="string">&quot;\n\n抱歉，发起请求时遇到了问题。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清空对话历史</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">clearHistory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            store.<span class="title function_">clearHistory</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重新生成会话ID</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">regenerateSessionId</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            sessionId.<span class="property">value</span> = <span class="string">`session_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 状态</span></span><br><span class="line">            messages,</span><br><span class="line">            <span class="attr">isGenerating</span>: isLoading, <span class="comment">// 使用 useXStream 的 isLoading 状态</span></span><br><span class="line">            inputMessage,</span><br><span class="line">            sessionId,</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 方法</span></span><br><span class="line">            handleUserSubmit,</span><br><span class="line">            clearHistory,</span><br><span class="line">            regenerateSessionId,</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 流式处理相关</span></span><br><span class="line">            cancel <span class="comment">// 暴露取消功能</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>src/composables/useMessageFormatter.js</code></strong> (消息动态状态处理)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息格式化 composable</span></span><br><span class="line"><span class="comment"> * 现在消息已经按 BubbleList 格式存储，只需要处理动态状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMessageFormatter</span>(<span class="params">messages, isGenerating</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加动态状态到消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> formattedMessages = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messages.<span class="property">value</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">message, index</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...message,</span><br><span class="line">            <span class="comment">// 只有最后一条AI消息在生成时显示打字效果</span></span><br><span class="line">            <span class="attr">typing</span>: message.<span class="property">role</span> === <span class="string">&#x27;ai&#x27;</span> &amp;&amp;</span><br><span class="line">                index === messages.<span class="property">value</span>.<span class="property">length</span> - <span class="number">1</span> &amp;&amp;</span><br><span class="line">                isGenerating.<span class="property">value</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        formattedMessages</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h5 id="3-视图层-ChatView-vue"><a href="#3-视图层-ChatView-vue" class="headerlink" title="3. 视图层 (ChatView.vue)"></a><strong>3. 视图层 (<code>ChatView.vue</code>)</strong></h5><p>现在，我们的视图层变得极其简洁，它只负责组合 <code>composable</code> 的能力和 <code>vue-element-plus-x</code> 的UI组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;h-screen w-screen flex&quot;&gt;</span><br><span class="line">    &lt;!-- 左侧会话管理 --&gt;</span><br><span class="line">    &lt;div class=&quot;w-64 border-r bg-gray-50 flex flex-col&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;p-4 border-b bg-gray-100&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;font-bold text-lg&quot;&gt;会话管理&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;flex-1 overflow-auto&quot;&gt;</span><br><span class="line">        &lt;Conversations v-model:active=&quot;activeConversationKey&quot; :items=&quot;conversationItems&quot; :label-max-width=&quot;200&quot;</span><br><span class="line">          :show-tooltip=&quot;true&quot; row-key=&quot;id&quot; @change=&quot;handleConversationChange&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 右侧聊天区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;flex-1 flex flex-col&quot;&gt;</span><br><span class="line">      &lt;!-- 聊天标题 --&gt;</span><br><span class="line">      &lt;div class=&quot;p-4 bg-blue-500 text-white text-xl font-bold&quot;&gt;</span><br><span class="line">        Spring AI 全栈聊天机器人</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 聊天内容区 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex-1 flex flex-col&quot;&gt;</span><br><span class="line">        &lt;!-- 消息列表 --&gt;</span><br><span class="line">        &lt;div class=&quot;flex-1 overflow-auto&quot;&gt;</span><br><span class="line">          &lt;BubbleList :list=&quot;formattedMessages&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 发送器 --&gt;</span><br><span class="line">        &lt;div class=&quot;border-t&quot;&gt;</span><br><span class="line">          &lt;Sender v-model=&quot;inputMessage&quot; :loading=&quot;isGenerating&quot; :submitBtnDisabled=&quot;isGenerating&quot;</span><br><span class="line">            placeholder=&quot;请输入您的问题...&quot; :clearable=&quot;true&quot; submitType=&quot;enter&quot; @submit=&quot;handleUserSubmit&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; BubbleList, Sender, Conversations &#125; from &#x27;vue-element-plus-x&#x27;;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import &#123; useChat &#125; from &#x27;../composables/useChat&#x27;;</span><br><span class="line">import &#123; useMessageFormatter &#125; from &#x27;../composables/useMessageFormatter&#x27;;</span><br><span class="line"></span><br><span class="line">// --- Composables ---</span><br><span class="line">const &#123;</span><br><span class="line">  messages,</span><br><span class="line">  isGenerating,</span><br><span class="line">  inputMessage,</span><br><span class="line">  handleUserSubmit</span><br><span class="line">&#125; = useChat();</span><br><span class="line"></span><br><span class="line">const &#123; formattedMessages &#125; = useMessageFormatter(messages, isGenerating);</span><br><span class="line"></span><br><span class="line">// --- 会话管理相关 ---</span><br><span class="line">const conversationItems = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;1&#x27;,</span><br><span class="line">    label: &#x27;第一个会话&#x27;,</span><br><span class="line">    group: &#x27;today&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;2&#x27;,</span><br><span class="line">    label: &#x27;第二个会话&#x27;,</span><br><span class="line">    group: &#x27;today&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">const activeConversationKey = ref(&#x27;1&#x27;);</span><br><span class="line"></span><br><span class="line">function handleConversationChange(item) &#123;</span><br><span class="line">  ElMessage.success(`选中了: $&#123;item.label&#125;`);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 确保组件铺满全屏 */</span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">#app &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="4-主程序入口-src-main-js"><a href="#4-主程序入口-src-main-js" class="headerlink" title="4. 主程序入口 (src/main.js)"></a><strong>4. 主程序入口 (<code>src/main.js</code>)</strong></h5><p>最后，确保 <code>main.js</code> 正确初始化并注册了所有模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/style/main.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlusX</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus-x&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus-x/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlusX</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="5-后端配置跨域请求"><a href="#5-后端配置跨域请求" class="headerlink" title="5.后端配置跨域请求"></a>5.后端配置跨域请求</h5><p><strong><code>com.example.hellospringai.config.MvcConfiguration</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们启动前端服务器，并在输入框上与AI大模型对话，就能看到大模型给我们的所有响应格式！</p><hr><h3 id="3-5-对话记忆-Chat-Memory-：让-AI-拥有上下文-查阅"><a href="#3-5-对话记忆-Chat-Memory-：让-AI-拥有上下文-查阅" class="headerlink" title="3.5 对话记忆 (Chat Memory)：让 AI 拥有上下文 (查阅)"></a>3.5 对话记忆 (Chat Memory)：让 AI 拥有上下文 (查阅)</h3><p>大型语言模型（LLM）天生是<strong>无状态的</strong>，它们不会保留任何关于先前交互的记忆。这意味着每一次API调用都是一次全新的、独立的对话。如果我们希望构建一个能够进行多轮对话、理解上下文的智能应用，就必须引入“记忆”机制。</p><p>Spring AI 提供的 <code>ChatMemory</code> 功能，正是为了解决这个问题而生，它允许我们在与LLM的多次交互中，有效地存储和检索对话上下文。</p><h4 id="3-5-1-核心概念：策略与存储的分离"><a href="#3-5-1-核心概念：策略与存储的分离" class="headerlink" title="3.5.1 核心概念：策略与存储的分离"></a>3.5.1 核心概念：策略与存储的分离</h4><p>在深入研究之前，我们必须清晰地理解 Spring AI 在记忆功能上的核心设计思想：<strong>将记忆的策略（如何记住）与记忆的存储（记在哪里）相分离</strong>。</p><p>这一思想通过两个核心接口得以实现：</p><ol><li><strong><code>ChatMemory</code> (策略)</strong>: 定义了记忆的<strong>策略和行为</strong>。它决定了应该保留哪些消息、何时删除旧消息。例如，“只保留最近10条消息”就是一个策略。</li><li><strong><code>ChatMemoryRepository</code> (存储)</strong>: 定义了记忆的<strong>存储和检索</strong>。它的唯一职责是在后端（如内存、数据库、Redis）存取消息数据。</li></ol><p>我们可以这样理解：<code>ChatMemoryRepository</code> 是一个“<strong>仓库</strong>”，而 <code>ChatMemory</code> 则是高效率的“<strong>仓库管理员</strong>”。管理员根据自己的一套规则（策略）来管理仓库中的货物（消息）。</p><p>同时，我们必须辨别另一个重要概念：</p><table><thead><tr><th align="left">术语 (Term)</th><th align="left">定义</th><th align="left">在 Spring AI 中的作用</th></tr></thead><tbody><tr><td align="left"><strong>聊天记忆 (Chat Memory)</strong></td><td align="left">为了让AI理解下文而提供的一个<strong>相关的、有限的</strong>对话历史子集。</td><td align="left"><strong>用于构建 Prompt</strong>。<code>ChatMemory</code> 抽象负责管理这个“短期记忆”，决定哪些历史消息应该被包含在下一次发给AI的请求中。</td></tr><tr><td align="left"><strong>聊天记录 (Chat History)</strong></td><td align="left">一段会话中<strong>全部、完整的</strong>消息交换历史。</td><td align="left"><strong>用于审计或长期存储</strong>。Spring AI 的 <code>ChatMemory</code> <strong>不负责</strong>存储完整的聊天记录。如需此功能，应使用 Spring Data 等持久化方案自行实现。</td></tr></tbody></table><h4 id="3-5-2-记忆策略：MessageWindowChatMemory"><a href="#3-5-2-记忆策略：MessageWindowChatMemory" class="headerlink" title="3.5.2 记忆策略：MessageWindowChatMemory"></a>3.5.2 记忆策略：<code>MessageWindowChatMemory</code></h4><p>Spring AI 默认并最常用的记忆策略是 <code>MessageWindowChatMemory</code>，即<strong>消息窗口记忆</strong>。</p><ul><li><strong>工作原理</strong>：它像一个“滑动窗口”，始终只保留最近的 N 条消息。当新的消息进入时，最老的消息就会被挤出窗口（系统消息 <code>SystemMessage</code> 通常会被特殊保留，不受窗口大小影响）。</li><li><strong>核心优势</strong>：这是在实际应用中<strong>性价比最高</strong>的策略。它能有效防止上下文无限增长，从而避免超出模型 Token 限制而报错，同时也能节省大量的 Token 费用。</li></ul><h4 id="3-5-3-记忆存储：从内存到持久化-ChatMemoryRepository-查阅"><a href="#3-5-3-记忆存储：从内存到持久化-ChatMemoryRepository-查阅" class="headerlink" title="3.5.3 记忆存储：从内存到持久化 (ChatMemoryRepository) (查阅)"></a>3.5.3 记忆存储：从内存到持久化 (<code>ChatMemoryRepository</code>) (查阅)</h4><p><code>ChatMemoryRepository</code> 是一个负责物理存储和检索消息的抽象接口。Spring AI 提供了多种内置实现，让我们可以轻松地将对话记忆从易失的内存，切换到可靠的持久化数据库中。</p><h5 id="1-内存存储库-InMemoryChatMemoryRepository"><a href="#1-内存存储库-InMemoryChatMemoryRepository" class="headerlink" title="1. 内存存储库 (InMemoryChatMemoryRepository)"></a>1. 内存存储库 (<code>InMemoryChatMemoryRepository</code>)</h5><p>这是最基础、最简单的实现，它使用 Java 内置的 <code>ConcurrentHashMap</code> 来存储消息。</p><ul><li><strong>特点</strong>：无需任何额外配置和依赖，开箱即用。非常适合快速原型开发和测试。</li><li><strong>缺点</strong>：数据随应用程序的重启而丢失，不适用于生产环境。</li><li><strong>自动配置</strong>：默认情况下，如果项目中没有配置其他任何 <code>ChatMemoryRepository</code> 的 Bean，Spring AI 会自动配置一个 <code>InMemoryChatMemoryRepository</code> 实例。</li></ul><h5 id="2-JDBC-存储库-JdbcChatMemoryRepository"><a href="#2-JDBC-存储库-JdbcChatMemoryRepository" class="headerlink" title="2. JDBC 存储库 (JdbcChatMemoryRepository)"></a>2. JDBC 存储库 (<code>JdbcChatMemoryRepository</code>)</h5><p>这是一个通用的实现，用于将聊天消息存储在任何支持 JDBC 的关系型数据库中（如 MySQL, PostgreSQL, H2 等），是<strong>生产环境的首选</strong>。</p><ul><li><p><strong>引入依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-jdbc-store-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置属性 (<code>application.yml</code>)</strong>:</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>spring.ai.chat.memory.repository.jdbc.initialize-schema</code></td><td align="left">控制何时初始化数据库表结构。可选值: <code>embedded</code>, <code>always</code>, <code>never</code>。</td><td align="left"><code>embedded</code></td></tr><tr><td align="left"><code>spring.ai.chat.memory.repository.jdbc.schema</code></td><td align="left">用于初始化表结构的 SQL 脚本位置。<code>@@platform@@</code> 会被自动替换。</td><td align="left"><code>classpath:org/.../schema-@@platform@@.sql</code></td></tr><tr><td align="left"><code>spring.ai.chat.memory.repository.jdbc.platform</code></td><td align="left">手动指定数据库平台（如 <code>mysql</code>, <code>postgresql</code>）。</td><td align="left">(自动检测)</td></tr></tbody></table></li><li><p><strong>Schema 初始化最佳实践</strong>:</p><ul><li><strong>开发时</strong>：可以设置为 <code>always</code>，让 Spring AI 自动创建表，非常方便。</li><li><strong>生产时</strong>：<strong>强烈推荐</strong>设置为 <code>never</code>。在生产环境中，数据库的表结构（Schema）应该由专业的数据库迁移工具（如 Flyway 或 Liquibase）来管理，或者由 DBA 手动执行脚本创建，以确保版本控制和安全性。</li></ul></li><li><p><strong>MySQL 表结构定义</strong>:<br>如果选择手动创建，以下是 <code>JdbcChatMemoryRepository</code> 所需的表结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `spring_ai_chat_memory` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `conversation_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `content` text <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT NULL</span>, <span class="comment">-- 存储消息类型，如 USER, ASSISTANT</span></span><br><span class="line">  `<span class="type">timestamp</span>` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `media` json <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 为未来的多模态消息预留</span></span><br><span class="line">  `metadata` json <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 存储额外信息</span></span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`),</span><br><span class="line">  KEY `idx_conversation_id` (`conversation_id`),</span><br><span class="line">  KEY `idx_conversation_timestamp` (`conversation_id`,`<span class="type">timestamp</span>`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-4-集成与配置：将记忆注入-ChatClient-查阅"><a href="#3-5-4-集成与配置：将记忆注入-ChatClient-查阅" class="headerlink" title="3.5.4 集成与配置：将记忆注入 ChatClient (查阅)"></a>3.5.4 集成与配置：将记忆注入 <code>ChatClient</code> (查阅)</h4><p>我们已经有了“策略”和“仓库”，现在需要将它们组装起来，并让 <code>ChatClient</code> 使用它们。最佳实践是使用 <strong><code>Advisor</code> (顾问)</strong> 将记忆功能自动织入到 <code>ChatClient</code> 的调用流程中。</p><table><thead><tr><th align="left">记忆顾问 (Advisor)</th><th align="left">工作原理</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="left"><strong><code>MessageChatMemoryAdvisor</code></strong></td><td align="left">将历史记录作为标准的 <strong><code>Message</code> 对象列表</strong>加入到 Prompt 中。</td><td align="left"><strong>最常用、最标准</strong>的多轮对话，能完整保留角色和上下文信息。</td></tr><tr><td align="left"><strong><code>PromptChatMemoryAdvisor</code></strong></td><td align="left">将历史记录格式化为<strong>纯文本字符串</strong>，并附加到 <code>SystemMessage</code> 中。</td><td align="left">简单的上下文附加，或当某个特定模型对纯文本上下文处理得更好时。</td></tr><tr><td align="left"><strong><code>VectorStoreChatMemoryAdvisor</code></strong></td><td align="left">从<strong>向量数据库</strong>中搜索与当前输入最相关的历史片段作为记忆。</td><td align="left">实现“长期记忆”或 RAG 式的对话，让AI能回忆起很久以前的相关信息。</td></tr></tbody></table><h5 id="组合配置-CommonConfiguration-java"><a href="#组合配置-CommonConfiguration-java" class="headerlink" title="组合配置 CommonConfiguration.java"></a>组合配置 <code>CommonConfiguration.java</code></h5><p>现在，我们将所有部分组合在一个 <code>@Configuration</code> 文件中，展示一个完整的、基于 JDBC 持久化的记忆配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径: src/main/java/com/example/hellospringai/config/CommonConfiguration.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.memory.MessageWindowChatMemory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.memory.repository.jdbc.JdbcChatMemoryRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Spring Boot会根据我们的yml配置，自动为我们配置好一个JdbcChatMemoryRepository</span></span><br><span class="line">    <span class="comment">//    因此我们可以直接注入它。</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcChatMemoryRepository chatMemoryRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 定义我们的“记忆策略”Bean。</span></span><br><span class="line"><span class="comment">     * 这里我们创建了一个使用JDBC持久化存储的、最大容量为50条消息的窗口记忆。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MessageWindowChatMemory 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatMemory <span class="title function_">chatMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageWindowChatMemory.builder()</span><br><span class="line">                .chatMemoryRepository(chatMemoryRepository) <span class="comment">// 指定记忆的“仓库”</span></span><br><span class="line">                .maxMessages(<span class="number">50</span>) <span class="comment">// 指定记忆的“策略”：只保留最近50条消息</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3. 定义我们最终的 ChatClient Bean。</span></span><br><span class="line"><span class="comment">     * 我们将日志和记忆功能通过“顾问”模式织入。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatModel Spring Boot 自动配置好的 ChatModel 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatMemory 我们上面定义的 ChatMemory Bean 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个配置好日志和持久化记忆功能的 ChatClient 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatClient <span class="title function_">chatClient</span><span class="params">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChatClient.builder(chatModel)</span><br><span class="line">                .defaultAdvisors(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">SimpleLoggerAdvisor</span>(),                                  <span class="comment">// 添加日志顾问，用于调试</span></span><br><span class="line">                        MessageChatMemoryAdvisor.builder(chatMemory).build()      <span class="comment">// 添加记忆顾问，并传入我们的记忆策略Bean</span></span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-5-实际调用：传递会话-ID"><a href="#3-5-5-实际调用：传递会话-ID" class="headerlink" title="3.5.5 实际调用：传递会话 ID"></a>3.5.5 实际调用：传递会话 ID</h4><p>配置完成后，我们还需要在调用 <code>ChatClient</code> 时，告诉它当前这次对话属于哪个“会话 (Conversation)”，以便它能从数据库中加载正确的历史记录。</p><p>这是通过传递一个<strong>会话ID (<code>conversationId</code>)</strong> 来实现的。</p><h5 id="1-Service-层改造"><a href="#1-Service-层改造" class="headerlink" title="1. Service 层改造"></a>1. Service 层改造</h5><p>我们的 <code>ChatService</code> 需要能够接收 <code>conversationId</code>，并将其传递给 <code>ChatClient</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【方法】带聊天记忆的流式对话</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prompt 用户输入消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conversationId 会话ID，用于维护聊天记忆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> AI回复的文本内容流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">getChatStreamWithMemory</span><span class="params">(String prompt, String conversationId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">            .user(prompt) <span class="comment">// 用户输入消息</span></span><br><span class="line">            <span class="comment">// 关键：通过 .advisors() 方法的参数，将会话ID传递给记忆顾问</span></span><br><span class="line">            <span class="comment">// ChatMemory.CONVERSATION_ID 是官方提供的标准Key，推荐使用</span></span><br><span class="line">            .advisors(a -&gt; a.param(ChatMemory.CONVERSATION_ID, conversationId)) </span><br><span class="line">            .stream()</span><br><span class="line">            .content();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Controller-层改造"><a href="#2-Controller-层改造" class="headerlink" title="2. Controller 层改造"></a>2. Controller 层改造</h5><p>相应地，<code>ChatController</code> 的接口也需要增加一个 <code>chatId</code> 参数，以从前端请求中接收这个ID。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line">    <span class="comment">// ... 构造函数注入 ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/chat&quot;, produces = &quot;text/event-stream;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">streamChat</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;)</span> String message,</span></span><br><span class="line"><span class="params">                                   // 关键: 从请求参数中获取会话ID</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;chatId&quot;)</span> String chatId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chatService.getChatStreamWithMemory(message, chatId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们的后端就拥有了完整的、可持久化的多会话记忆能力。每个唯一的 <code>chatId</code> 都会在 <code>spring_ai_chat_memory</code> 表中拥有自己独立的聊天记录。 </p><hr><h4 id="3-5-6-前端适配：核心代码实现"><a href="#3-5-6-前端适配：核心代码实现" class="headerlink" title="3.5.6 前端适配：核心代码实现"></a>3.5.6 前端适配：核心代码实现</h4><p>后端具备记忆能力后，前端的核心任务是<strong>管理并发送 <code>chatId</code></strong>。以下是实现此功能的几个关键文件的核心代码与直接说明。</p><h5 id="1-API-层-src-api-chat-js"><a href="#1-API-层-src-api-chat-js" class="headerlink" title="1. API 层: src/api/chat.js"></a>1. API 层: <code>src/api/chat.js</code></h5><ul><li><strong>目的</strong>: 让 API 调用能携带 <code>chatId</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以流式方式获取AI回答</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">message</span> - 用户消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">chatId</span> - 【新增】当前会话的唯一ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;Response&gt;</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">streamChat</span>(<span class="params">message, chatId = <span class="string">&#x27;default&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;request.defaults.baseURL&#125;</span>/ai/chat?message=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(message)&#125;</span>&amp;chatId=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(chatId)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/event-stream&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-状态管理层-src-stores-conversationStore-js"><a href="#2-状态管理层-src-stores-conversationStore-js" class="headerlink" title="2. 状态管理层: src/stores/conversationStore.js"></a>2. 状态管理层: <code>src/stores/conversationStore.js</code></h5><ul><li><strong>目的</strong>: 重构状态管理，从单一对话升级为支持多会话的完整系统。这是前端实现多会话记忆的核心。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个使用 Pinia 状态管理库创建的对话存储模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个名为 &#x27;conversation&#x27; 的状态存储，用于管理多会话聊天对话的状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useConversationStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;conversation&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 定义存储的状态数据</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 所有会话的数据，按会话ID分组存储</span></span><br><span class="line">    <span class="attr">conversations</span>: &#123;</span><br><span class="line">      <span class="comment">// &#x27;conversation-id&#x27;: &#123;</span></span><br><span class="line">      <span class="comment">//   id: &#x27;conversation-id&#x27;,</span></span><br><span class="line">      <span class="comment">//   title: &#x27;会话标题&#x27;,</span></span><br><span class="line">      <span class="comment">//   messages: [], // BubbleList格式的消息数组</span></span><br><span class="line">      <span class="comment">//   createdAt: Date,</span></span><br><span class="line">      <span class="comment">//   updatedAt: Date,</span></span><br><span class="line">      <span class="comment">//   group: &#x27;today&#x27; // 用于分组显示</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前活跃的会话ID</span></span><br><span class="line">    <span class="attr">currentConversationId</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 消息ID计数器</span></span><br><span class="line">    <span class="attr">nextMessageId</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算属性</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 获取当前会话的消息列表</span></span><br><span class="line">    <span class="attr">currentMessages</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!state.<span class="property">currentConversationId</span> || !state.<span class="property">conversations</span>[state.<span class="property">currentConversationId</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">conversations</span>[state.<span class="property">currentConversationId</span>].<span class="property">messages</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前会话信息</span></span><br><span class="line">    <span class="attr">currentConversation</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!state.<span class="property">currentConversationId</span> || !state.<span class="property">conversations</span>[state.<span class="property">currentConversationId</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">conversations</span>[state.<span class="property">currentConversationId</span>];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取会话列表（用于 Conversations 组件）</span></span><br><span class="line">    <span class="attr">conversationItems</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>(now.<span class="title function_">getFullYear</span>(), now.<span class="title function_">getMonth</span>(), now.<span class="title function_">getDate</span>());</span><br><span class="line">      <span class="keyword">const</span> yesterday = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getTime</span>() - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">const</span> weekAgo = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getTime</span>() - <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(state.<span class="property">conversations</span>).<span class="title function_">map</span>(<span class="function"><span class="params">conv</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> updatedAt = <span class="keyword">new</span> <span class="title class_">Date</span>(conv.<span class="property">updatedAt</span>);</span><br><span class="line">        <span class="keyword">let</span> group = <span class="string">&#x27;older&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (updatedAt &gt;= today) &#123;</span><br><span class="line">          group = <span class="string">&#x27;today&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (updatedAt &gt;= yesterday) &#123;</span><br><span class="line">          group = <span class="string">&#x27;yesterday&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (updatedAt &gt;= weekAgo) &#123;</span><br><span class="line">          group = <span class="string">&#x27;week&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">id</span>: conv.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">label</span>: conv.<span class="property">title</span>,</span><br><span class="line">          group,</span><br><span class="line">          <span class="attr">updatedAt</span>: conv.<span class="property">updatedAt</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(b.<span class="property">updatedAt</span>) - <span class="keyword">new</span> <span class="title class_">Date</span>(a.<span class="property">updatedAt</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义可以修改状态的操作方法</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 创建新会话</span></span><br><span class="line">    <span class="title function_">createConversation</span>(<span class="params">title = <span class="literal">null</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> conversationId = <span class="string">`conv_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">9</span>)&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId] = &#123;</span><br><span class="line">        <span class="attr">id</span>: conversationId,</span><br><span class="line">        <span class="attr">title</span>: title || <span class="string">&#x27;新的会话&#x27;</span>,</span><br><span class="line">        <span class="attr">messages</span>: [],</span><br><span class="line">        <span class="attr">createdAt</span>: now,</span><br><span class="line">        <span class="attr">updatedAt</span>: now</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 自动切换到新会话</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentConversationId</span> = conversationId;</span><br><span class="line">      <span class="keyword">return</span> conversationId;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切换会话</span></span><br><span class="line">    <span class="title function_">switchConversation</span>(<span class="params">conversationId</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentConversationId</span> = conversationId;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除会话</span></span><br><span class="line">    <span class="title function_">deleteConversation</span>(<span class="params">conversationId</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId]) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果删除的是当前会话，切换到其他会话或创建新会话</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentConversationId</span> === conversationId) &#123;</span><br><span class="line">          <span class="keyword">const</span> remainingConversations = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">conversations</span>);</span><br><span class="line">          <span class="keyword">if</span> (remainingConversations.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentConversationId</span> = remainingConversations[<span class="number">0</span>];</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">createConversation</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重命名会话</span></span><br><span class="line">    <span class="title function_">renameConversation</span>(<span class="params">conversationId, newTitle</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId].<span class="property">title</span> = newTitle;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conversations</span>[conversationId].<span class="property">updatedAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一条新消息到当前会话</span></span><br><span class="line">    <span class="title function_">addMessage</span>(<span class="params">&#123; role, content = <span class="string">&#x27;&#x27;</span> &#125;</span>) &#123;</span><br><span class="line">      <span class="comment">// 确保有当前会话</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">currentConversationId</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createConversation</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> messageRole = role === <span class="string">&#x27;user&#x27;</span> ? <span class="string">&#x27;user&#x27;</span> : <span class="string">&#x27;ai&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> placement = messageRole === <span class="string">&#x27;ai&#x27;</span> ? <span class="string">&#x27;start&#x27;</span> : <span class="string">&#x27;end&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> variant = messageRole === <span class="string">&#x27;ai&#x27;</span> ? <span class="string">&#x27;filled&#x27;</span> : <span class="string">&#x27;outlined&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> avatar = messageRole === <span class="string">&#x27;ai&#x27;</span></span><br><span class="line">        ? <span class="string">&#x27;https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png&#x27;</span></span><br><span class="line">        : <span class="string">&#x27;https://avatars.githubusercontent.com/u/76239030?v=4&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建符合 BubbleList 组件要求的消息对象</span></span><br><span class="line">      <span class="keyword">const</span> bubbleMessage = &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="variable language_">this</span>.<span class="property">nextMessageId</span>++,         <span class="comment">// 唯一标识</span></span><br><span class="line">        <span class="attr">role</span>: messageRole,                 <span class="comment">// user | ai 角色定义</span></span><br><span class="line">        placement,                         <span class="comment">// start | end 气泡位置</span></span><br><span class="line">        content,                          <span class="comment">// 消息内容，流式接收时只需要改这个值即可</span></span><br><span class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,                   <span class="comment">// 当前气泡的加载状态</span></span><br><span class="line">        <span class="attr">shape</span>: <span class="string">&#x27;corner&#x27;</span>,                  <span class="comment">// 气泡的形状</span></span><br><span class="line">        variant,                          <span class="comment">// 气泡的样式</span></span><br><span class="line">        <span class="attr">isMarkdown</span>: <span class="literal">true</span>,                 <span class="comment">// 是否渲染为 markdown</span></span><br><span class="line">        <span class="attr">typing</span>: <span class="literal">false</span>,                    <span class="comment">// 是否开启打字器效果，该属性不会和流式接收冲突</span></span><br><span class="line">        <span class="attr">isFog</span>: messageRole === <span class="string">&#x27;ai&#x27;</span>,      <span class="comment">// 是否开启打字雾化效果，该效果 v1.1.6 新增，且在 typing 为 true 时生效，该效果会覆盖 typing 的 suffix 属性</span></span><br><span class="line">        avatar,                           <span class="comment">// 头像</span></span><br><span class="line">        <span class="attr">avatarSize</span>: <span class="string">&#x27;36px&#x27;</span>,               <span class="comment">// 头像占位大小</span></span><br><span class="line">        <span class="attr">avatarGap</span>: <span class="string">&#x27;12px&#x27;</span>,                <span class="comment">// 头像与气泡之间的距离</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">messages</span>.<span class="title function_">push</span>(bubbleMessage);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">updatedAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 智能更新会话标题（基于用户的第一条消息）</span></span><br><span class="line">      <span class="keyword">if</span> (messageRole === <span class="string">&#x27;user&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">messages</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> title = content.<span class="property">length</span> &gt; <span class="number">20</span> ? content.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">20</span>) + <span class="string">&#x27;...&#x27;</span> : content;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">title</span> = title || <span class="string">&#x27;新的会话&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向当前会话的最后一条消息追加内容（用于流式接收AI回复）</span></span><br><span class="line">    <span class="title function_">appendToLastMessage</span>(<span class="params">contentChunk</span>) &#123;</span><br><span class="line">      <span class="comment">// 确保有当前会话f</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">currentConversationId</span> || !<span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> messages = <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">messages</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果没有消息则直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (messages.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取最后一条消息</span></span><br><span class="line">      <span class="keyword">const</span> lastMessage = messages[messages.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 只有当最后一条消息是AI助手的回复时才追加内容</span></span><br><span class="line">      <span class="keyword">if</span> (lastMessage.<span class="property">role</span> === <span class="string">&#x27;ai&#x27;</span>) &#123;</span><br><span class="line">        lastMessage.<span class="property">content</span> += contentChunk;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">updatedAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空当前会话历史</span></span><br><span class="line">    <span class="title function_">clearCurrentHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentConversationId</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">messages</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conversations</span>[<span class="variable language_">this</span>.<span class="property">currentConversationId</span>].<span class="property">updatedAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空所有会话历史</span></span><br><span class="line">    <span class="title function_">clearAllHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conversations</span> = &#123;&#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentConversationId</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createConversation</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化默认会话（如果没有任何会话）</span></span><br><span class="line">    <span class="title function_">initializeDefaultConversation</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">conversations</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createConversation</span>(<span class="string">&#x27;默认会话&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">currentConversationId</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有当前会话，选择最近更新的会话</span></span><br><span class="line">        <span class="keyword">const</span> conversationIds = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">conversations</span>);</span><br><span class="line">        <span class="keyword">const</span> latestConversation = conversationIds.<span class="title function_">reduce</span>(<span class="function">(<span class="params">latest, id</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> conv = <span class="variable language_">this</span>.<span class="property">conversations</span>[id];</span><br><span class="line">          <span class="keyword">return</span> (!latest || conv.<span class="property">updatedAt</span> &gt; <span class="variable language_">this</span>.<span class="property">conversations</span>[latest].<span class="property">updatedAt</span>) ? id : latest;</span><br><span class="line">        &#125;, <span class="literal">null</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentConversationId</span> = latestConversation;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-逻辑层-Composables"><a href="#3-逻辑层-Composables" class="headerlink" title="3. 逻辑层: Composables"></a>3. 逻辑层: Composables</h5><ul><li><p><strong>目的</strong>: 将复杂的UI交互逻辑与核心的聊天功能逻辑解耦，使代码更清晰。</p></li><li><p><strong><code>src/composables/useChat.js</code></strong> (聊天核心逻辑)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch, computed, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useConversationStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/conversationStore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; streamChat &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/chat&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useXStream &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-element-plus-x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天核心逻辑 composable</span></span><br><span class="line"><span class="comment"> * 处理消息发送、流式接收、状态管理等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useChat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 状态管理 - 使用新的会话管理系统</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useConversationStore</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; currentMessages, currentConversationId &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入消息</span></span><br><span class="line">    <span class="keyword">const</span> inputMessage = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 useXStream 处理流式数据</span></span><br><span class="line">    <span class="keyword">const</span> &#123; startStream, cancel, isLoading, data, error &#125; = <span class="title function_">useXStream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性处理累积的流式数据</span></span><br><span class="line">    <span class="keyword">const</span> streamContent = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.<span class="property">value</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> text = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.<span class="property">value</span>.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            <span class="keyword">const</span> chunk = data.<span class="property">value</span>[index];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 检查chunk是否是对象且包含data属性</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">&#x27;object&#x27;</span> &amp;&amp; chunk !== <span class="literal">null</span> &amp;&amp; <span class="string">&#x27;data&#x27;</span> <span class="keyword">in</span> chunk) &#123;</span><br><span class="line">                    <span class="comment">// 处理非空data</span></span><br><span class="line">                    <span class="keyword">if</span> (chunk.<span class="property">data</span>) &#123;</span><br><span class="line">                        text += chunk.<span class="property">data</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chunk.<span class="property">data</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 空data块通常表示换行符</span></span><br><span class="line">                        text += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                    text += chunk;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知的chunk格式:&#x27;</span>, chunk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;解析流数据时出错:&#x27;</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听流式数据更新，实时追加到消息中</span></span><br><span class="line">    <span class="title function_">watch</span>(streamContent, <span class="function">(<span class="params">newContent, oldContent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newContent &amp;&amp; newContent !== oldContent) &#123;</span><br><span class="line">            <span class="comment">// 获取新增的内容部分</span></span><br><span class="line">            <span class="keyword">const</span> newChunk = newContent.<span class="title function_">slice</span>(oldContent?.<span class="property">length</span> || <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (newChunk) &#123;</span><br><span class="line">                store.<span class="title function_">appendToLastMessage</span>(newChunk);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听错误信息</span></span><br><span class="line">    <span class="title function_">watch</span>(error, <span class="function">(<span class="params">errorInfo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (errorInfo) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;流式请求失败:&quot;</span>, errorInfo);</span><br><span class="line">            store.<span class="title function_">appendToLastMessage</span>(<span class="string">&quot;\n\n抱歉，处理您的请求时遇到了问题。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理用户提交消息</span></span><br><span class="line"><span class="comment">     * 使用 useXStream 处理流式接收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleUserSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> messageContent = inputMessage.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证输入</span></span><br><span class="line">        <span class="keyword">if</span> (!messageContent || isLoading.<span class="property">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保有当前会话ID</span></span><br><span class="line">        <span class="keyword">if</span> (!currentConversationId.<span class="property">value</span>) &#123;</span><br><span class="line">            store.<span class="title function_">initializeDefaultConversation</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 添加用户消息到对话历史</span></span><br><span class="line">            store.<span class="title function_">addMessage</span>(&#123;</span><br><span class="line">            <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                <span class="attr">content</span>: messageContent</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 清空输入框</span></span><br><span class="line">            inputMessage.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 创建AI回复占位</span></span><br><span class="line">            store.<span class="title function_">addMessage</span>(&#123;</span><br><span class="line">                <span class="attr">role</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 获取流式响应，传递当前会话ID</span></span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">streamChat</span>(messageContent, currentConversationId.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送请求，会话ID:&#x27;</span>, currentConversationId.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 使用 useXStream 处理流式数据</span></span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">startStream</span>(&#123;</span><br><span class="line">                <span class="attr">readableStream</span>: response.<span class="property">body</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;发起流式请求失败:&quot;</span>, err);</span><br><span class="line">            store.<span class="title function_">appendToLastMessage</span>(<span class="string">&quot;\n\n抱歉，发起请求时遇到了问题。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件挂载时初始化</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        store.<span class="title function_">initializeDefaultConversation</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 状态</span></span><br><span class="line">        <span class="attr">messages</span>: currentMessages, <span class="comment">// 返回当前会话的消息</span></span><br><span class="line">        <span class="attr">isGenerating</span>: isLoading, <span class="comment">// 使用 useXStream 的 isLoading 状态</span></span><br><span class="line">        inputMessage,</span><br><span class="line">        currentConversationId,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        handleUserSubmit,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 流式处理相关</span></span><br><span class="line">        cancel <span class="comment">// 暴露取消功能</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>src/composables/useConversationManager.js</code></strong> (会话管理逻辑)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span>, <span class="title class_">ElMessageBox</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123; useConversationStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/conversationStore&#x27;</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话管理 composable</span></span><br><span class="line"><span class="comment">     * 处理会话相关的UI交互逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useConversationManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> store = <span class="title function_">useConversationStore</span>();</span><br><span class="line">        <span class="keyword">const</span> &#123; conversationItems, currentConversation, currentConversationId &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 当前选中的会话KEY（用于 Conversations 组件）</span></span><br><span class="line">        <span class="keyword">const</span> activeConversationKey = <span class="title function_">computed</span>(&#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="function">() =&gt;</span> currentConversationId.<span class="property">value</span>,</span><br><span class="line">            <span class="attr">set</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (value &amp;&amp; value !== currentConversationId.<span class="property">value</span>) &#123;</span><br><span class="line">                    store.<span class="title function_">switchConversation</span>(value);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 当前会话标题</span></span><br><span class="line">        <span class="keyword">const</span> currentConversationTitle = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> currentConversation.<span class="property">value</span>?.<span class="property">title</span> || <span class="string">&#x27;Spring AI 全栈聊天机器人&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 会话切换处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleConversationChange</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会话切换:&#x27;</span>, item);</span><br><span class="line">            store.<span class="title function_">switchConversation</span>(item.<span class="property">id</span>);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">`切换到: <span class="subst">$&#123;item.label&#125;</span>`</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 新建会话</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleCreateNewConversation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> conversationId = store.<span class="title function_">createConversation</span>();</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;新建会话成功&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新建会话:&#x27;</span>, conversationId);</span><br><span class="line">            <span class="keyword">return</span> conversationId;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清空当前会话历史</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleClearCurrentHistory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">                <span class="string">&#x27;确定要清空当前会话的所有消息吗？&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;确认清空&#x27;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                store.<span class="title function_">clearCurrentHistory</span>();</span><br><span class="line">                <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;已清空当前会话历史&#x27;</span>);</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 用户取消操作</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理会话菜单命令（重命名、删除）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleMenuCommand</span> = (<span class="params">command, item</span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;菜单命令:&#x27;</span>, command, item);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;rename&#x27;</span>:</span><br><span class="line">                    <span class="title function_">handleRenameConversation</span>(item);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;delete&#x27;</span>:</span><br><span class="line">                    <span class="title function_">handleDeleteConversation</span>(item);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知的菜单命令:&#x27;</span>, command);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重命名会话</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleRenameConversation</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入新的会话名称&#x27;</span>, <span class="string">&#x27;重命名会话&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                <span class="attr">inputValue</span>: item.<span class="property">label</span>,</span><br><span class="line">                <span class="attr">inputPattern</span>: <span class="regexp">/^.&#123;1,50&#125;$/</span>,</span><br><span class="line">                <span class="attr">inputErrorMessage</span>: <span class="string">&#x27;会话名称长度必须在1-50个字符之间&#x27;</span></span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                store.<span class="title function_">renameConversation</span>(item.<span class="property">id</span>, value);</span><br><span class="line">                <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;重命名成功&#x27;</span>);</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 用户取消操作</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 删除会话</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleDeleteConversation</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">                <span class="string">`确定要删除会话 &quot;<span class="subst">$&#123;item.label&#125;</span>&quot; 吗？此操作不可撤销。`</span>,</span><br><span class="line">                <span class="string">&#x27;确认删除&#x27;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                store.<span class="title function_">deleteConversation</span>(item.<span class="property">id</span>);</span><br><span class="line">                <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 用户取消操作</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 状态</span></span><br><span class="line">            conversationItems,</span><br><span class="line">            currentConversation,</span><br><span class="line">            currentConversationId,</span><br><span class="line">            activeConversationKey,</span><br><span class="line">            currentConversationTitle,</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 方法</span></span><br><span class="line">            handleConversationChange,</span><br><span class="line">            handleCreateNewConversation,</span><br><span class="line">            handleClearCurrentHistory,</span><br><span class="line">            handleMenuCommand,</span><br><span class="line">            handleRenameConversation,</span><br><span class="line">            handleDeleteConversation</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure></li></ul><h5 id="4-视图层-src-views-ChatView-vue"><a href="#4-视图层-src-views-ChatView-vue" class="headerlink" title="4. 视图层: src/views/ChatView.vue"></a>4. 视图层: <code>src/views/ChatView.vue</code></h5><ul><li><strong>目的</strong>: 整合所有状态和逻辑，构建最终的用户交互界面。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;h-screen w-screen flex&quot;&gt;</span><br><span class="line">    &lt;!-- 左侧会话管理 --&gt;</span><br><span class="line">    &lt;div class=&quot;w-64 border-r bg-gray-50 flex flex-col&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;p-4 border-b bg-gray-100 flex justify-between items-center&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;font-bold text-lg&quot;&gt;会话管理&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;handleCreateNewConversation&quot; class=&quot;btn btn-ghost btn-sm&quot; title=&quot;新建会话&quot;&gt;</span><br><span class="line">          ＋</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;flex-1 overflow-auto&quot;&gt;</span><br><span class="line">        &lt;Conversations :active=&quot;activeConversationKey&quot; @update:active=&quot;(value) =&gt; activeConversationKey = value&quot;</span><br><span class="line">          :items=&quot;conversationItems&quot; :label-max-width=&quot;200&quot; :show-tooltip=&quot;true&quot; row-key=&quot;id&quot; show-built-in-menu</span><br><span class="line">          groupable @change=&quot;handleConversationChange&quot; @menu-command=&quot;handleMenuCommand&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 右侧聊天区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;flex-1 flex flex-col&quot;&gt;</span><br><span class="line">      &lt;!-- 聊天标题 --&gt;</span><br><span class="line">      &lt;div class=&quot;p-4 bg-blue-500 text-white text-xl font-bold flex justify-between items-center&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; currentConversationTitle &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&quot;handleClearCurrentHistory&quot;</span><br><span class="line">          class=&quot;px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors&quot; title=&quot;清空当前会话&quot;&gt;</span><br><span class="line">          清空</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 聊天内容区 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex-1 flex flex-col&quot;&gt;</span><br><span class="line">        &lt;!-- 消息列表 --&gt;</span><br><span class="line">        &lt;div class=&quot;flex-1 overflow-auto&quot;&gt;</span><br><span class="line">          &lt;BubbleList :list=&quot;formattedMessages&quot; is-markdown /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 发送器 --&gt;</span><br><span class="line">        &lt;div class=&quot;border-t&quot;&gt;</span><br><span class="line">          &lt;Sender v-model=&quot;inputMessage&quot; :loading=&quot;isGenerating&quot; :submitBtnDisabled=&quot;isGenerating&quot;</span><br><span class="line">            placeholder=&quot;请输入您的问题...&quot; :clearable=&quot;true&quot; submitType=&quot;enter&quot; @submit=&quot;handleUserSubmit&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; BubbleList, Sender, Conversations &#125; from &#x27;vue-element-plus-x&#x27;;</span><br><span class="line">import &#123; useChat &#125; from &#x27;../composables/useChat&#x27;;</span><br><span class="line">import &#123; useMessageFormatter &#125; from &#x27;../composables/useMessageFormatter&#x27;;</span><br><span class="line">import &#123; useConversationManager &#125; from &#x27;../composables/useConversationManager&#x27;;</span><br><span class="line"></span><br><span class="line">// --- 聊天功能 ---</span><br><span class="line">const &#123;</span><br><span class="line">  messages,</span><br><span class="line">  isGenerating,</span><br><span class="line">  inputMessage,</span><br><span class="line">  handleUserSubmit</span><br><span class="line">&#125; = useChat();</span><br><span class="line"></span><br><span class="line">const &#123; formattedMessages &#125; = useMessageFormatter(messages, isGenerating);</span><br><span class="line"></span><br><span class="line">// --- 会话管理功能 ---</span><br><span class="line">const &#123;</span><br><span class="line">  conversationItems,</span><br><span class="line">  activeConversationKey,</span><br><span class="line">  currentConversationTitle,</span><br><span class="line">  handleConversationChange,</span><br><span class="line">  handleCreateNewConversation,</span><br><span class="line">  handleClearCurrentHistory,</span><br><span class="line">  handleMenuCommand</span><br><span class="line">&#125; = useConversationManager();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 确保组件铺满全屏 */</span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">#app &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="3-6-会话历史：从数据库加载与管理"><a href="#3-6-会话历史：从数据库加载与管理" class="headerlink" title="3.6 会话历史：从数据库加载与管理"></a>3.6 会话历史：从数据库加载与管理</h3><p>在上一章，我们配置了 <code>JdbcChatMemoryRepository</code>，它会默默地将所有对话记录保存到 <code>spring_ai_chat_memory</code> 数据库表中。这解决了AI的“短期记忆”问题。但对于一个完整的应用而言，我们还需要让用户能够看到并管理自己的历史会话列表，就像所有主流聊天应用一样。</p><p>本章，我们将使用 <strong>MyBatis-Plus</strong> 这个强大的 ORM 框架，直接操作 <code>spring_ai_chat_memory</code> 表，为其创建一套完整的 <code>Service</code> 和 <code>Controller</code>，从而实现真正的会话持久化和管理功能。</p><h4 id="3-6-1-后端建设：构建历史记录服务"><a href="#3-6-1-后端建设：构建历史记录服务" class="headerlink" title="3.6.1 后端建设：构建历史记录服务"></a>3.6.1 后端建设：构建历史记录服务</h4><p>我们的第一步是在后端搭建一套完整的、用于查询和管理聊天历史的 CRUD 服务。</p><h5 id="1-引入依赖与配置"><a href="#1-引入依赖与配置" class="headerlink" title="1. 引入依赖与配置"></a>1. 引入依赖与配置</h5><ul><li><p><strong>在 <code>pom.xml</code> 中添加 MyBatis-Plus 依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在主启动类上添加 <code>@MapperScan</code> 注解</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.hellospringai.mapper&quot;)</span> <span class="comment">// 扫描Mapper接口所在的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSpringAiApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloSpringAiApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在 <code>application.yml</code> 中添加 MyBatis-Plus 配置</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MyBatis-Plus 配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启驼峰命名转换, e.g., conversation_id -&gt; conversationId</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 打印SQL日志到控制台，方便调试</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 逻辑删除配置 (如果你的表设计中有逻辑删除字段)</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 指定Mapper XML文件的位置 (如果使用XML)</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-数据访问层-Entity-Mapper"><a href="#2-数据访问层-Entity-Mapper" class="headerlink" title="2. 数据访问层 (Entity &amp; Mapper)"></a>2. 数据访问层 (Entity &amp; Mapper)</h5><ul><li><p><strong>实体类 <code>ChatMemory.java</code></strong>：<br>这个实体类直接映射到 <code>spring_ai_chat_memory</code> 数据库表，让我们能以对象的方式操作数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;SPRING_AI_CHAT_MEMORY&quot;)</span> <span class="comment">// 精确指定表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatMemory</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;conversation_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String conversationId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;content&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type; <span class="comment">// USER 或 ASSISTANT</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;timestamp&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;media&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String media; <span class="comment">// JSON</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(&quot;metadata&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String metadata; <span class="comment">// JSON</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Mapper 接口 <code>ChatMemoryMapper.java</code></strong>:<br>通过继承 <code>BaseMapper</code>，我们无需编写任何 SQL 语句，即可拥有强大的单表 CRUD 能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.entity.ChatMemory;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChatMemoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ChatMemory&gt; &#123;</span><br><span class="line">    <span class="comment">// 继承 BaseMapper 后，所有基础的数据库操作都已具备</span></span><br><span class="line">    <span class="comment">// 我们将使用 QueryWrapper 来处理复杂的查询，以获得更好的类型安全和灵活性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-业务逻辑层-Service-ServiceImpl"><a href="#3-业务逻辑层-Service-ServiceImpl" class="headerlink" title="3. 业务逻辑层 (Service &amp; ServiceImpl)"></a>3. 业务逻辑层 (Service &amp; ServiceImpl)</h5><ul><li><p><strong>服务接口 <code>IChatHistoryService.java</code></strong>:<br>定义了我们对外提供的所有历史记录管理功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.entity.ChatMemory;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IChatHistoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ChatMemory&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据会话ID获取该会话的完整聊天记录</span></span><br><span class="line">    List&lt;ChatMemory&gt; <span class="title function_">getChatHistory</span><span class="params">(String conversationId)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有会话的列表信息（用于前端展示会话列表）</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllConversations</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除指定会话的所有记录</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteChatHistory</span><span class="params">(String conversationId)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取单个会话的统计信息</span></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">getConversationStats</span><span class="params">(String conversationId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>服务实现 <code>ChatHistoryServiceImpl.java</code></strong>:<br>这里是所有业务逻辑的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.entity.ChatMemory;</span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.mapper.ChatMemoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.service.IChatHistoryService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatHistoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ChatMemoryMapper, ChatMemory&gt; <span class="keyword">implements</span> <span class="title class_">IChatHistoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ChatMemory&gt; <span class="title function_">getChatHistory</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 按时间升序查询指定会话的所有消息</span></span><br><span class="line">        QueryWrapper&lt;ChatMemory&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;conversation_id&quot;</span>, conversationId)</span><br><span class="line">                    .orderByAsc(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllConversations</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这个方法相对复杂，它需要为前端聚合每个会话的必要信息</span></span><br><span class="line">        QueryWrapper&lt;ChatMemory&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.select(<span class="string">&quot;conversation_id&quot;</span>, <span class="string">&quot;timestamp&quot;</span>)</span><br><span class="line">                    .orderByDesc(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;ChatMemory&gt; allRecords = <span class="built_in">this</span>.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 使用 Java Stream 去重，得到所有唯一的会话ID，并保持时间倒序</span></span><br><span class="line">        List&lt;String&gt; conversationIds = allRecords.stream()</span><br><span class="line">                .map(ChatMemory::getConversationId)</span><br><span class="line">                .distinct()</span><br><span class="line">                .toList();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 遍历每个唯一的会话ID，查询其详细信息</span></span><br><span class="line">        <span class="keyword">return</span> conversationIds.stream().map(id -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; conversation = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            conversation.put(<span class="string">&quot;conversationId&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.1 获取该会话的最后一条消息作为更新时间</span></span><br><span class="line">            <span class="type">ChatMemory</span> <span class="variable">lastMessage</span> <span class="operator">=</span> <span class="built_in">this</span>.query()</span><br><span class="line">                    .eq(<span class="string">&quot;conversation_id&quot;</span>, id).orderByDesc(<span class="string">&quot;timestamp&quot;</span>).last(<span class="string">&quot;LIMIT 1&quot;</span>).one();</span><br><span class="line">            conversation.put(<span class="string">&quot;lastMessageTime&quot;</span>, lastMessage != <span class="literal">null</span> ? lastMessage.getTimestamp() : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.2 统计该会话的消息总数</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">messageCount</span> <span class="operator">=</span> <span class="built_in">this</span>.query().eq(<span class="string">&quot;conversation_id&quot;</span>, id).count();</span><br><span class="line">            conversation.put(<span class="string">&quot;messageCount&quot;</span>, messageCount);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.3 获取该会话的第一条用户消息作为默认标题</span></span><br><span class="line">            <span class="type">ChatMemory</span> <span class="variable">firstUserMessage</span> <span class="operator">=</span> <span class="built_in">this</span>.query()</span><br><span class="line">                    .eq(<span class="string">&quot;conversation_id&quot;</span>, id).eq(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;USER&quot;</span>).orderByAsc(<span class="string">&quot;timestamp&quot;</span>).last(<span class="string">&quot;LIMIT 1&quot;</span>).one();</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;新的会话&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (firstUserMessage != <span class="literal">null</span> &amp;&amp; firstUserMessage.getContent() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> firstUserMessage.getContent().trim();</span><br><span class="line">                title = content.length() &gt; <span class="number">20</span> ? content.substring(<span class="number">0</span>, <span class="number">20</span>) + <span class="string">&quot;...&quot;</span> : content;</span><br><span class="line">            &#125;</span><br><span class="line">            conversation.put(<span class="string">&quot;title&quot;</span>, title);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> conversation;</span><br><span class="line">        &#125;).toList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteChatHistory</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;ChatMemory&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;conversation_id&quot;</span>, conversationId);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.remove(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getConversationStats</span><span class="params">(String conversationId)</span> &#123;</span><br><span class="line">        <span class="comment">// 此处省略了与getAllConversations中类似的单个会话信息查询逻辑</span></span><br><span class="line">        Map&lt;String, Object&gt; stats = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// ... 查询逻辑 ...</span></span><br><span class="line">        <span class="keyword">return</span> stats;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-API-接口层-Controller"><a href="#4-API-接口层-Controller" class="headerlink" title="4. API 接口层 (Controller)"></a>4. API 接口层 (Controller)</h5><ul><li><strong><code>ChatHistoryController.java</code></strong>:<br>创建一个全新的 Controller，将我们的 Service 方法暴露为 RESTful API，供前端调用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.entity.ChatMemory;</span><br><span class="line"><span class="keyword">import</span> com.example.hellospringai.service.IChatHistoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/chat-history&quot;)</span> <span class="comment">// 为历史记录管理API设置统一前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatHistoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IChatHistoryService chatHistoryService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatHistoryController</span><span class="params">(IChatHistoryService chatHistoryService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatHistoryService = chatHistoryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/conversations&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllConversations</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chatHistoryService.getAllConversations();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/conversation/&#123;conversationId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ChatMemory&gt; <span class="title function_">getChatHistory</span><span class="params">(<span class="meta">@PathVariable</span> String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chatHistoryService.getChatHistory(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/conversation/&#123;conversationId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">deleteChatHistory</span><span class="params">(<span class="meta">@PathVariable</span> String conversationId)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> chatHistoryService.deleteChatHistory(conversationId);</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;success&quot;</span>, success, <span class="string">&quot;message&quot;</span>, success ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/conversation/&#123;conversationId&#125;/stats&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getConversationStats</span><span class="params">(<span class="meta">@PathVariable</span> String conversationId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chatHistoryService.getConversationStats(conversationId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-6-2-前端集成：实现真正的持久化会话"><a href="#3-6-2-前端集成：实现真正的持久化会话" class="headerlink" title="3.6.2 前端集成：实现真正的持久化会话"></a>3.6.2 前端集成：实现真正的持久化会话</h4><p>后端 API 准备就绪后，前端需要进行相应的升级，从完全依赖本地状态，转变为与后端 API 深度集成，实现真正的持久化。</p><h5 id="1-新增前端-API-文件"><a href="#1-新增前端-API-文件" class="headerlink" title="1. 新增前端 API 文件"></a>1. 新增前端 API 文件</h5><ul><li><strong><code>src/api/chatHistory.js</code></strong>:<br>创建一个新的 API 文件，专门用于调用我们刚刚创建的后端历史记录管理接口。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有会话列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getAllConversations</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/api/chat-history/conversations&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定会话的聊天历史记录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getChatHistory</span>(<span class="params">conversationId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/api/chat-history/conversation/<span class="subst">$&#123;conversationId&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定会话的聊天记录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deleteChatHistory</span>(<span class="params">conversationId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/api/chat-history/conversation/<span class="subst">$&#123;conversationId&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取会话统计信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getConversationStats</span>(<span class="params">conversationId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/api/chat-history/conversation/<span class="subst">$&#123;conversationId&#125;</span>/stats`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-状态与逻辑层核心升级"><a href="#2-状态与逻辑层核心升级" class="headerlink" title="2. 状态与逻辑层核心升级"></a>2. 状态与逻辑层核心升级</h5><ul><li><p><strong><code>src/stores/conversationStore.js</code> (升级版)</strong>:<br>这是前端改动的核心。<code>store</code> 不再只是一个简单的本地状态容器，它现在需要负责与后端进行异步通信，加载和管理会话数据。</p><ul><li><strong>新增 Actions</strong>:<ul><li><code>loadConversationsFromBackend()</code>: 在应用启动时调用，从后端获取所有会话的列表。</li><li><code>loadConversationHistory(conversationId)</code>: 当用户切换到一个会话时，如果该会话的消息尚未加载，则调用此方法从后端拉取完整的聊天记录。</li><li><code>deleteConversation(conversationId)</code>: 删除会话时，先调用后端的删除 API，成功后再更新本地状态。</li></ul></li><li><strong>修改现有 Actions</strong>:<ul><li><code>switchConversation(conversationId)</code>: 切换会话时，增加一步检查，如果历史记录未加载，则触发 <code>loadConversationHistory</code>。</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span>, <span class="title class_">ElMessageBox</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useConversationStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/conversationStore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会话管理 composable</span></span><br><span class="line"><span class="comment"> * 处理会话相关的UI交互逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useConversationManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useConversationStore</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; conversationItems, currentConversation, currentConversationId &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前选中的会话KEY（用于 Conversations 组件）</span></span><br><span class="line">    <span class="keyword">const</span> activeConversationKey = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> currentConversationId.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">set</span>: <span class="title function_">async</span> (value) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &amp;&amp; value !== currentConversationId.<span class="property">value</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">await</span> store.<span class="title function_">switchConversation</span>(value);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败:&#x27;</span>, error);</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前会话标题</span></span><br><span class="line">    <span class="keyword">const</span> currentConversationTitle = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentConversation.<span class="property">value</span>?.<span class="property">title</span> || <span class="string">&#x27;Spring AI 全栈聊天机器人&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话切换处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleConversationChange</span> = <span class="keyword">async</span> (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会话切换:&#x27;</span>, item);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> store.<span class="title function_">switchConversation</span>(item.<span class="property">id</span>);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">`切换到: <span class="subst">$&#123;item.label&#125;</span>`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败:&#x27;</span>, error);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleCreateNewConversation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> conversationId = store.<span class="title function_">createConversation</span>();</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;新建会话成功&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新建会话:&#x27;</span>, conversationId);</span><br><span class="line">        <span class="keyword">return</span> conversationId;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空当前会话历史</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClearCurrentHistory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">            <span class="string">&#x27;确定要清空当前会话的所有消息吗？&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;确认清空&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">clearCurrentHistory</span>();</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;已清空当前会话历史&#x27;</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 用户取消操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理会话菜单命令（重命名、删除）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleMenuCommand</span> = (<span class="params">command, item</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;菜单命令:&#x27;</span>, command, item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;rename&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleRenameConversation</span>(item);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;delete&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleDeleteConversation</span>(item);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知的菜单命令:&#x27;</span>, command);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重命名会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleRenameConversation</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入新的会话名称&#x27;</span>, <span class="string">&#x27;重命名会话&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">            <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">            <span class="attr">inputValue</span>: item.<span class="property">label</span>,</span><br><span class="line">            <span class="attr">inputPattern</span>: <span class="regexp">/^.&#123;1,50&#125;$/</span>,</span><br><span class="line">            <span class="attr">inputErrorMessage</span>: <span class="string">&#x27;会话名称长度必须在1-50个字符之间&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">renameConversation</span>(item.<span class="property">id</span>, value);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;重命名成功&#x27;</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 用户取消操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleDeleteConversation</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">            <span class="string">`确定要删除会话 &quot;<span class="subst">$&#123;item.label&#125;</span>&quot; 吗？此操作不可撤销。`</span>,</span><br><span class="line">            <span class="string">&#x27;确认删除&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ).<span class="title function_">then</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> store.<span class="title function_">deleteConversation</span>(item.<span class="property">id</span>);</span><br><span class="line">                <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> || <span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">message</span> || <span class="string">&#x27;删除失败&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除会话失败:&#x27;</span>, error);</span><br><span class="line">                <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除会话失败: &#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 用户取消操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 状态</span></span><br><span class="line">        conversationItems,</span><br><span class="line">        currentConversation,</span><br><span class="line">        currentConversationId,</span><br><span class="line">        activeConversationKey,</span><br><span class="line">        currentConversationTitle,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        handleConversationChange,</span><br><span class="line">        handleCreateNewConversation,</span><br><span class="line">        handleClearCurrentHistory,</span><br><span class="line">        handleMenuCommand,</span><br><span class="line">        handleRenameConversation,</span><br><span class="line">        handleDeleteConversation</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li><strong><code>src/composables/useChat.js</code> 和 <code>useConversationManager.js</code> (升级版)</strong>:</li><li><strong><code>useChat.js</code></strong> 新增 <code>onMounted</code>生命周期钩子，在组件挂载时调用 <code>store</code> 中的 <code>initializeDefaultConversation</code>（或 <code>loadConversationsFromBackend</code>），实现应用启动时自动加载历史会话。<br>* <strong><code>useConversationManager.js</code></strong> 中的删除、切换等方法现在会调用 <code>store</code> 中对应的<strong>异步 action</strong>，并处理 <code>Promise</code> 的成功或失败状态，向用户显示如 <code>ElMessage</code> 的提示信息。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch, computed, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useConversationStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/conversationStore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; streamChat &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/chat&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useXStream &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-element-plus-x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天核心逻辑 composable</span></span><br><span class="line"><span class="comment"> * 处理消息发送、流式接收、状态管理等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useChat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 状态管理 - 使用新的会话管理系统</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useConversationStore</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; currentMessages, currentConversationId &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入消息</span></span><br><span class="line">    <span class="keyword">const</span> inputMessage = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 useXStream 处理流式数据</span></span><br><span class="line">    <span class="keyword">const</span> &#123; startStream, cancel, isLoading, data, error &#125; = <span class="title function_">useXStream</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算属性处理累积的流式数据</span></span><br><span class="line">    <span class="keyword">const</span> streamContent = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.<span class="property">value</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> text = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.<span class="property">value</span>.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            <span class="keyword">const</span> chunk = data.<span class="property">value</span>[index];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 检查chunk是否是对象且包含data属性</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">&#x27;object&#x27;</span> &amp;&amp; chunk !== <span class="literal">null</span> &amp;&amp; <span class="string">&#x27;data&#x27;</span> <span class="keyword">in</span> chunk) &#123;</span><br><span class="line">                    <span class="comment">// 处理非空data</span></span><br><span class="line">                    <span class="keyword">if</span> (chunk.<span class="property">data</span>) &#123;</span><br><span class="line">                        text += chunk.<span class="property">data</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chunk.<span class="property">data</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 空data块通常表示换行符</span></span><br><span class="line">                        text += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                    text += chunk;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知的chunk格式:&#x27;</span>, chunk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;解析流数据时出错:&#x27;</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听流式数据更新，实时追加到消息中</span></span><br><span class="line">    <span class="title function_">watch</span>(streamContent, <span class="function">(<span class="params">newContent, oldContent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newContent &amp;&amp; newContent !== oldContent) &#123;</span><br><span class="line">            <span class="comment">// 获取新增的内容部分</span></span><br><span class="line">            <span class="keyword">const</span> newChunk = newContent.<span class="title function_">slice</span>(oldContent?.<span class="property">length</span> || <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (newChunk) &#123;</span><br><span class="line">                store.<span class="title function_">appendToLastMessage</span>(newChunk);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听错误信息</span></span><br><span class="line">    <span class="title function_">watch</span>(error, <span class="function">(<span class="params">errorInfo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (errorInfo) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;流式请求失败:&quot;</span>, errorInfo);</span><br><span class="line">            store.<span class="title function_">appendToLastMessage</span>(<span class="string">&quot;\n\n抱歉，处理您的请求时遇到了问题。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理用户提交消息</span></span><br><span class="line"><span class="comment">     * 使用 useXStream 处理流式接收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleUserSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> messageContent = inputMessage.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证输入</span></span><br><span class="line">        <span class="keyword">if</span> (!messageContent || isLoading.<span class="property">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保有当前会话ID</span></span><br><span class="line">        <span class="keyword">if</span> (!currentConversationId.<span class="property">value</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> store.<span class="title function_">initializeDefaultConversation</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 添加用户消息到对话历史</span></span><br><span class="line">            store.<span class="title function_">addMessage</span>(&#123;</span><br><span class="line">                <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                <span class="attr">content</span>: messageContent</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 清空输入框</span></span><br><span class="line">            inputMessage.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 创建AI回复占位</span></span><br><span class="line">            store.<span class="title function_">addMessage</span>(&#123;</span><br><span class="line">                <span class="attr">role</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">                <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 获取流式响应，传递当前会话ID</span></span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">streamChat</span>(messageContent, currentConversationId.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送请求，会话ID:&#x27;</span>, currentConversationId.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 使用 useXStream 处理流式数据</span></span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">startStream</span>(&#123;</span><br><span class="line">                <span class="attr">readableStream</span>: response.<span class="property">body</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;发起流式请求失败:&quot;</span>, err);</span><br><span class="line">            store.<span class="title function_">appendToLastMessage</span>(<span class="string">&quot;\n\n抱歉，发起请求时遇到了问题。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件挂载时初始化</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> store.<span class="title function_">initializeDefaultConversation</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会话初始化完成&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;会话初始化失败:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 状态</span></span><br><span class="line">        <span class="attr">messages</span>: currentMessages, <span class="comment">// 返回当前会话的消息</span></span><br><span class="line">        <span class="attr">isGenerating</span>: isLoading, <span class="comment">// 使用 useXStream 的 isLoading 状态</span></span><br><span class="line">        inputMessage,</span><br><span class="line">        currentConversationId,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        handleUserSubmit,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 流式处理相关</span></span><br><span class="line">        cancel <span class="comment">// 暴露取消功能</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>useConversationManager</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span>, <span class="title class_">ElMessageBox</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useConversationStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/conversationStore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会话管理 composable</span></span><br><span class="line"><span class="comment"> * 处理会话相关的UI交互逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useConversationManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useConversationStore</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; conversationItems, currentConversation, currentConversationId &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前选中的会话KEY（用于 Conversations 组件）</span></span><br><span class="line">    <span class="keyword">const</span> activeConversationKey = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> currentConversationId.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">set</span>: <span class="title function_">async</span> (value) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &amp;&amp; value !== currentConversationId.<span class="property">value</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">await</span> store.<span class="title function_">switchConversation</span>(value);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败:&#x27;</span>, error);</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前会话标题</span></span><br><span class="line">    <span class="keyword">const</span> currentConversationTitle = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentConversation.<span class="property">value</span>?.<span class="property">title</span> || <span class="string">&#x27;Spring AI 全栈聊天机器人&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话切换处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleConversationChange</span> = <span class="keyword">async</span> (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会话切换:&#x27;</span>, item);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> store.<span class="title function_">switchConversation</span>(item.<span class="property">id</span>);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">`切换到: <span class="subst">$&#123;item.label&#125;</span>`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败:&#x27;</span>, error);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;切换会话失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleCreateNewConversation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> conversationId = store.<span class="title function_">createConversation</span>();</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;新建会话成功&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新建会话:&#x27;</span>, conversationId);</span><br><span class="line">        <span class="keyword">return</span> conversationId;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空当前会话历史</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClearCurrentHistory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">            <span class="string">&#x27;确定要清空当前会话的所有消息吗？&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;确认清空&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">clearCurrentHistory</span>();</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;已清空当前会话历史&#x27;</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 用户取消操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理会话菜单命令（重命名、删除）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleMenuCommand</span> = (<span class="params">command, item</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;菜单命令:&#x27;</span>, command, item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;rename&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleRenameConversation</span>(item);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;delete&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleDeleteConversation</span>(item);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知的菜单命令:&#x27;</span>, command);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重命名会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleRenameConversation</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入新的会话名称&#x27;</span>, <span class="string">&#x27;重命名会话&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">            <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">            <span class="attr">inputValue</span>: item.<span class="property">label</span>,</span><br><span class="line">            <span class="attr">inputPattern</span>: <span class="regexp">/^.&#123;1,50&#125;$/</span>,</span><br><span class="line">            <span class="attr">inputErrorMessage</span>: <span class="string">&#x27;会话名称长度必须在1-50个字符之间&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">renameConversation</span>(item.<span class="property">id</span>, value);</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;重命名成功&#x27;</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 用户取消操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleDeleteConversation</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">            <span class="string">`确定要删除会话 &quot;<span class="subst">$&#123;item.label&#125;</span>&quot; 吗？此操作不可撤销。`</span>,</span><br><span class="line">            <span class="string">&#x27;确认删除&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ).<span class="title function_">then</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> store.<span class="title function_">deleteConversation</span>(item.<span class="property">id</span>);</span><br><span class="line">                <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> || <span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">message</span> || <span class="string">&#x27;删除失败&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除会话失败:&#x27;</span>, error);</span><br><span class="line">                <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除会话失败: &#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 用户取消操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 状态</span></span><br><span class="line">        conversationItems,</span><br><span class="line">        currentConversation,</span><br><span class="line">        currentConversationId,</span><br><span class="line">        activeConversationKey,</span><br><span class="line">        currentConversationTitle,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        handleConversationChange,</span><br><span class="line">        handleCreateNewConversation,</span><br><span class="line">        handleClearCurrentHistory,</span><br><span class="line">        handleMenuCommand,</span><br><span class="line">        handleRenameConversation,</span><br><span class="line">        handleDeleteConversation</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>通过以上改造，我们的应用流程变为：</p><ol><li><strong>应用启动</strong>: <code>onMounted</code> 触发，<code>store</code> 调用后端 <code>/api/chat-history/conversations</code> 接口，获取所有会话的概要信息并展示在左侧列表。</li><li><strong>切换会话</strong>: 用户点击会话列表项，<code>store</code> 检查该会话的详细消息是否已加载。若未加载，则调用 <code>/api/chat-history/conversation/&#123;id&#125;</code> 接口获取数据，然后更新界面。</li><li><strong>删除会话</strong>: 用户点击删除，<code>store</code> 调用后端 <code>DELETE</code> 接口，成功后从本地 <code>state</code> 中移除该会话。</li></ol><p>至此，我们的聊天应用不再是一个“健忘”的工具，而是一个功能完备、数据持久、体验流畅的全栈应用。</p></div>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java微服务-AI篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务（二）：快速入门：构建你的第一个 AI 应用</title>
      <link href="/posts/2304.html"/>
      <url>/posts/2304.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="2-快速入门：构建你的第一个-AI-应用"><a href="#2-快速入门：构建你的第一个-AI-应用" class="headerlink" title="2. 快速入门：构建你的第一个 AI 应用"></a>2. 快速入门：构建你的第一个 AI 应用</h2><p>理论讲了再多，也不如亲手写下第一行代码来得实在。在本章中，我将手把手地带你完成从项目创建到运行第一个 AI 聊天应用的全部过程。这个过程会非常迅速，你将亲身体会到 Spring AI 如何将复杂的 AI 调用，简化为几次点击和几行代码。</p><h3 id="2-1-环境准备与项目初始化"><a href="#2-1-环境准备与项目初始化" class="headerlink" title="2.1 环境准备与项目初始化"></a>2.1 环境准备与项目初始化</h3><p>在开始之前，请确保你的开发环境中安装了以下必备工具：</p><ul><li><strong>JDK</strong>: Java Development Kit, 版本要求 <strong>17 或更高</strong>。Spring AI 和 Spring Boot 3.x 都是基于 Java 17 构建的。</li><li><strong>Maven&#x2F;Gradle</strong>: Java 项目构建工具。本教程将主要使用 Maven 作为示例。</li><li><strong>IDE</strong>: 集成开发环境。推荐使用 IntelliJ IDEA Ultimate&#x2F;Community 或带有 Spring Tools Suite 插件的 VS Code。</li><li><strong>一个 AI 模型的 API Key</strong>: 我们需要一个 AI 服务提供商的账户和 API 密钥。在本入门示例中，我们将使用 <strong>DeepSeek大语言模型</strong>。请前往 (<a href="https://platform.deepseek.com/api_keys">DeepSeek 开放平台</a>)) 注册并创建一个 API Key。</li></ul><p>准备就绪后，我们使用 Spring 官方的项目生成器——<strong>Spring Initializr</strong> 来创建我们的项目。</p><ol><li><p><strong>访问 <code>start.spring.io</code></strong>：在浏览器中打开 <a href="https://start.spring.io/">https://start.spring.io/</a>。</p></li><li><p><strong>填写项目元数据</strong>：</p></li></ol><table><thead><tr><th align="left">配置项</th><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>Project</strong></td><td align="left"><code>Maven</code></td><td align="left">选择 Maven 作为项目构建工具。</td></tr><tr><td align="left"><strong>Language</strong></td><td align="left"><code>Java</code></td><td align="left">选择 Java 作为开发语言。</td></tr><tr><td align="left"><strong>Spring Boot</strong></td><td align="left"><code>3.3.x</code></td><td align="left">选择一个最新的<strong>稳定版</strong>，避免选择 <code>SNAPSHOT</code> 或 <code>M</code> (Milestone) 版本。</td></tr><tr><td align="left"><strong>Group</strong></td><td align="left"><code>com.example</code></td><td align="left">通常是公司或组织的反向域名。</td></tr><tr><td align="left"><strong>Artifact</strong></td><td align="left"><code>hello-spring-ai</code></td><td align="left">项目的唯一标识符。</td></tr><tr><td align="left"><strong>Package name</strong></td><td align="left"><code>com.example.hellospringai</code></td><td align="left">Java 代码的基础包名。</td></tr><tr><td align="left"><strong>Packaging</strong></td><td align="left"><code>Jar</code></td><td align="left">我们将应用打包成一个可执行的 Jar 文件。</td></tr><tr><td align="left"><strong>Java</strong></td><td align="left"><code>17</code></td><td align="left">必须与你环境中安装的 JDK 版本匹配。</td></tr></tbody></table><ol start="3"><li><p><strong>添加依赖 (Dependencies)</strong>：这是最关键的一步，我们告诉 Spring Initializr 项目需要哪些能力。点击 “ADD DEPENDENCIES…” 按钮，搜索并添加：</p><ul><li><code>Spring Web</code>: 用于构建 RESTful API，让我们能通过 HTTP 请求与应用交互。</li><li><code>Spring AI OpenAI Support</code>: <strong>注意</strong>，即使我们的目标是 DeepSeek，我们依然先添加这个依赖。因为它不仅提供了 OpenAI 的客户端，更重要的是，它提供了一套与 OpenAI API <strong>兼容</strong>的实现。DeepSeek 的 API 正好遵循了这个规范，这为我们后续的无缝切换埋下了伏笔。</li></ul><blockquote><p><em>图片来源：Spring AI 官方文档</em></p></blockquote></li><li><p><strong>生成并下载项目</strong>：点击 “GENERATE” 按钮，下载生成的 <code>.zip</code> 压缩包。解压后，用你的 IDE 将其作为一个 Maven 项目导入。</p></li></ol><h3 id="2-2-核心依赖辨析：BOM-与-Starter"><a href="#2-2-核心依赖辨析：BOM-与-Starter" class="headerlink" title="2.2 核心依赖辨析：BOM 与 Starter"></a>2.2 核心依赖辨析：BOM 与 Starter</h3><p>打开项目的 <code>pom.xml</code> 文件，这是 Maven 项目的“心脏”。我们来解读一下 Spring Initializr 为我们生成的关键配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="核心概念解读"><a href="#核心概念解读" class="headerlink" title="核心概念解读"></a><strong>核心概念解读</strong></h4><table><thead><tr><th align="left">概念</th><th align="left">作用</th><th align="left">实际应用场景</th></tr></thead><tbody><tr><td align="left"><strong>BOM</strong> (Bill of Materials)</td><td align="left">定义并管理一组相互兼容的依赖版本。</td><td align="left">在一个大型项目中，手动管理几十个库的版本非常痛苦且容易出错。使用 BOM 后，我们只需引入 BOM 本身，所有清单内的库版本都会被自动、和谐地确定下来。</td></tr><tr><td align="left"><strong>Starter</strong></td><td align="left">Spring Boot 的自动化配置启动器。</td><td align="left">当我们想使用 Redis 时，只需引入 <code>spring-boot-starter-data-redis</code>，所有关于连接、序列化、模板类的 Bean 都会被自动创建。<code>spring-ai-openai-spring-boot-starter</code> 也是同理，它为我们自动创建了 <code>ChatClient</code>。</td></tr></tbody></table><h3 id="2-3-“Hello-AI-”-第一个聊天应用"><a href="#2-3-“Hello-AI-”-第一个聊天应用" class="headerlink" title="2.3 “Hello, AI!”: 第一个聊天应用"></a>2.3 “Hello, AI!”: 第一个聊天应用</h3><p>配置完成，现在进入激动人心的编码环节。</p><p>在这之前我们需要引入lombok为了以后的环节进行便利的操作，在<code>pom.xml</code>文件夹中引入lombok（不要选创建脚手架的lombok，会导致很多的问题）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-配置-API-Key-以-OpenAI-为例"><a href="#2-3-1-配置-API-Key-以-OpenAI-为例" class="headerlink" title="2.3.1 配置 API Key (以 OpenAI 为例)"></a>2.3.1 配置 API Key (以 OpenAI 为例)</h4><p>首先，配置 API Key。<strong>永远不要将密钥硬编码在 Java 代码中</strong>，这是安全红线。我们将其配置在 <code>application.yml</code> 文件里。</p><p>打开 <code>src/main/resources/application.properties</code> 并将其重命名为 <code>application.yml</code>（YAML 格式更具结构化，可读性更强），然后添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># src/main/resources/application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">ai:</span></span><br><span class="line">    <span class="attr">openai:</span></span><br><span class="line">      <span class="comment"># DeepSeek API 配置 - 使用 OpenAI 兼容协议</span></span><br><span class="line">      <span class="comment"># 注意！这里不能加v1后缀，在2025年的DeepSeek更新中明确指定了不需要v1后缀</span></span><br><span class="line">      <span class="comment"># 很多AI还是会错以为需要v1后缀</span></span><br><span class="line">      <span class="attr">base-url:</span> <span class="string">https://api.deepseek.com</span></span><br><span class="line">      <span class="attr">api-key:</span> <span class="string">&quot;sk-xxxxx&quot;</span></span><br><span class="line">      <span class="attr">chat:</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">model:</span> <span class="string">deepseek-chat</span></span><br><span class="line">          <span class="attr">temperature:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-配置ClientBean"><a href="#2-3-2-配置ClientBean" class="headerlink" title="2.3.2 配置ClientBean"></a>2.3.2 配置ClientBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/hellospringai/config/AppConfig.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatModel; <span class="comment">// 1. 导入 ChatModel</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfiguration</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动创建一个 ChatClient Bean。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatModel Spring Boot 根据 application.yml 自动配置好的 ChatModel 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个配置好的 ChatClient 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatClient <span class="title function_">chatClient</span><span class="params">(ChatModel chatModel)</span> &#123; <span class="comment">// 2. 在方法参数中请求注入 ChatModel</span></span><br><span class="line">        <span class="comment">// 3. 将注入的 chatModel 传递给 ChatClient.Builder</span></span><br><span class="line">        <span class="keyword">return</span> ChatClient.builder(chatModel).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码解读</strong></p><ol><li><strong><code>import org.springframework.ai.chat.model.ChatModel;</code></strong> 我们引入 <code>ChatModel</code> 接口，这是所有聊天模型（如 OpenAI、Ollama、DeepSeek 的实现）的通用父接口。</li><li><strong><code>public ChatClient chatClient(ChatModel chatModel)</code></strong> 这是最关键的一步。我们告诉 Spring：“请帮我创建一个 <code>chatClient</code> Bean，但在创建之前，请把容器里已经存在的那个 <code>ChatModel</code> 类型的 Bean 给我。”<ul><li><strong><code>chatModel</code> 从哪里来？</strong> 它是由 <code>spring-ai-openai-starter</code> 这个依赖根据你的 <code>application.yml</code> 文件自动创建和配置的。它已经“知道”了你的 <code>base-url</code>、<code>api-key</code> 和默认的 <code>model</code> 名称（<code>deepseek-chat</code>）。</li></ul></li><li><strong><code>return ChatClient.builder(chatModel).build();</code></strong> 我们把这个已经配置完毕的 <code>chatModel</code> “塞”给了 <code>ChatClient</code> 的构建器。这样，这个新的 <code>chatClient</code> Bean 就知道该如何与 AI 进行通信了。</li></ol><h4 id="2-3-3-编写-Controller"><a href="#2-3-3-编写-Controller" class="headerlink" title="2.3.3 编写 Controller"></a>2.3.3 编写 Controller</h4><p>接下来，我们创建一个简单的 <code>RestController</code>，它会接收一个问题，然后调用 AI 模型生成答案。</p><p>在 <code>com.example.hellospringai/controller</code> 包下创建一个名为 <code>ChatController</code> 的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \src\main\java\com\example\hellospringai\controller\</span></span><br><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map; <span class="comment">// 1. 导入 Map 类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个 GET 请求接口，路径为 /ai/chat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收来自 URL 的查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含 AI 回答的 JSON 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/chat&quot;)</span></span><br><span class="line">    <span class="comment">// 2. 将返回类型从 String 修改为 Map&lt;String, Object&gt;</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">chat</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;给我讲个关于程序员的笑话&quot;)</span> String message)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取 AI 的纯文本回复</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">aiResponse</span> <span class="operator">=</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .call()</span><br><span class="line">                .content();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 将回复包装在一个 Map 对象中返回</span></span><br><span class="line">        <span class="comment">// Spring Boot 会自动将其转换为 JSON</span></span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;answer&quot;</span>, aiResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>代码是不是非常简洁？让我们来解读一下</code></strong>：<br>这个 ChatController 定义了一个接收用户提问、调用AI、并返回标准 JSON 响应的Web接口。</p><p><strong>注入方式</strong>：通过构造器注入 ChatClient.Builder，这是 Spring 推荐的用法，安全且清晰。</p><p><strong>核心逻辑</strong>：链式调用 <code>chatClient.prompt().user(message).call().content()</code> 的作用可以概括为：</p><p> <strong>构建提示 → 添加用户输入 → 调用 AI → 提取文本结果</strong>。</p><p><strong>返回格式</strong>：方法返回一个 Map 对象，Spring 框架会自动将其转换为 {“answer”: “…”} 格式的 JSON 响应，非常适合现代应用开发。</p><p>但这样他的结果是一次性返回的，会遇到长时间的阻塞，我们可以对代码进行如下的微调，这样子就能实现AI式对话式的响应结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellospringai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux; <span class="comment">// 1. 导入 Flux</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ai&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个 GET 请求接口，以现代、响应式的方式流式输出 AI 回答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收来自 URL 的查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含 AI 回答文本块的响应式数据流 (Flux)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/chat&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span> <span class="comment">// 这里必须指定编码，否则中文将无法正确编码</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">streamChat</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;给我写一首关于星空的五言绝句&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 直接返回 ChatClient 调用链产生的 Flux&lt;String&gt;</span></span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .stream()</span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-运行与测试"><a href="#2-3-4-运行与测试" class="headerlink" title="2.3.4 运行与测试"></a>2.3.4 运行与测试</h4><p>现在，一切准备就绪。</p><ol><li><strong>运行应用</strong>：在你的 IDE 中找到 <code>HelloSpringAiApplication.java</code> 文件，右键点击并选择 “Run”。或者使用 Maven 命令 <code>./mvnw spring-boot:run</code>。</li><li><strong>测试接口</strong>：应用启动后（默认端口为 8080），打开浏览器或使用 cURL 等工具访问我们的 API 端点。</li></ol><p>   <strong>使用浏览器</strong>：<br>   访问 &#96;<a href="http://localhost:8080/ai/chat">http://localhost:8080/ai/chat</a></p><p>   你会看到类似下面的 JSON 响应：<br>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;answer&quot;</span><span class="punctuation">:</span><span class="string">&quot;好的！这是一个经典的程序员笑话：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**程序员面试**  </span></span><br><span class="line"><span class="string">面试官： &quot;</span>你简历上写着你擅长Python，那你能说出`is`和`==`的区别吗？<span class="string">&quot;  </span></span><br><span class="line"><span class="string">程序员： &quot;</span>当然！`==`是问‘你们的值相等吗？’，而`is`是问‘你们是不是同一个对象？’……就像我和我女朋友，她总说‘你和代码`is`（是）真爱，但从来不`==`（等于）爱我！’<span class="string">&quot;  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">面试官： &quot;</span>……你被录用了，但建议别让HR听到这个比喻。<span class="string">&quot;  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（附：Python中`is`比较内存地址，`==`比较值；笑话的冷度≈程序员咖啡的浓度☕️）&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>   你也可以在 URL 中附带自己的问题：<br>   <code>http://localhost:8080/ai/chat?message=请用三个词总结一下Spring框架</code></p><p>   响应：<br>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;answer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1. **轻量级**  \n2. **依赖注入**  \n3. **模块化**  \n\n（或替代词：AOP、容器、生态）&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>   恭喜你！你已经成功构建并运行了你的第一个 Spring AI 应用！</p><h3 id="2-4-项目结构与核心配置解析"><a href="#2-4-项目结构与核心配置解析" class="headerlink" title="2.4 项目结构与核心配置解析"></a>2.4 项目结构与核心配置解析</h3><p>让我们最后回顾一下我们项目的结构和核心配置，这有助于你建立一个清晰的整体认知。</p><h4 id="2-4-1-项目结构最佳实践"><a href="#2-4-1-项目结构最佳实践" class="headerlink" title="2.4.1 项目结构最佳实践"></a>2.4.1 项目结构最佳实践</h4><p>一个典型的 Spring Boot 项目结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">hello-spring-ai</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── example</span><br><span class="line">    │   │           └── hellospringai</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               ├── HelloSpringAiApplication.java  // Spring Boot 主启动类</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               ├── config               ``  // 存放配置类 (e.g., @Configuration beans)</span><br><span class="line">    │   │               │   └── CommonConfiguration.java</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               ├── controller             // Web 层：处理HTTP请求，调用Service</span><br><span class="line">    │   │               │   └── ChatController.java</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               ├── dto                    // 数据传输对象 (Data Transfer Object)</span><br><span class="line">    │   │               │   ├── ChatRequest.java   // 封装请求数据</span><br><span class="line">    │   │               │   └── ChatResponse.java  // 封装响应数据</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               ├── service                // 业务逻辑层</span><br><span class="line">    │   │               │   ├── impl               // Service接口的实现类</span><br><span class="line">    │   │               │   │   └── ChatServiceImpl.java</span><br><span class="line">    │   │               │   └── ChatService.java   // Service接口，定义业务方法</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               ├── exception              // 自定义异常及全局异常处理</span><br><span class="line">    │   │               │   └── GlobalExceptionHandler.java</span><br><span class="line">    │   │               │</span><br><span class="line">    │   │               └── repository             // 数据访问层 (如果需要持久化)</span><br><span class="line">    │   │                   └── ConversationRepository.java</span><br><span class="line">    │   │</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── static                         // 存放静态资源 (CSS, JavaScript, images)</span><br><span class="line">    │       │   └── css</span><br><span class="line">    │       │       └── style.css</span><br><span class="line">    │       ├── templates                      // 存放模板文件 (e.g., Thymeleaf, FreeMarker)</span><br><span class="line">    │       │   └── index.html</span><br><span class="line">    │       └── application.yml                // Spring Boot 核心配置文件</span><br><span class="line">    │</span><br><span class="line">    └── <span class="built_in">test</span></span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── example</span><br><span class="line">                    └── hellospringai</span><br><span class="line">                        ├── controller</span><br><span class="line">                        │   └── ChatControllerTest.java</span><br><span class="line">                        └── service</span><br><span class="line">                            └── ChatServiceImplTest.java</span><br></pre></td></tr></table></figure><p> <strong>请求处理流程示例</strong></p><p>一个典型的请求会像这样在各层之间流动：</p><ol><li>客户端发送 HTTP 请求（例如 <code>POST /ai/chat</code>，请求体是一个包含 <code>message</code> 的 JSON）。</li><li><code>ChatController</code> 接收请求，将 JSON 请求体反序列化为 <code>ChatRequest</code> DTO 对象。</li><li><code>ChatController</code> 调用 <code>ChatService</code> 的方法，并将 <code>ChatRequest</code> 中的数据传递过去。</li><li><code>ChatServiceImpl</code> 执行核心业务逻辑，比如调用 <code>ChatClient</code> 与 AI 交互，或者从 <code>ConversationRepository</code> 读取历史对话记录。</li><li><code>ChatService</code> 将处理结果（AI 的回答）返回给 <code>ChatController</code>。</li><li><code>ChatController</code> 将结果封装成 <code>ChatResponse</code> DTO 对象，Spring Boot 自动将其序列化为 JSON 响应，返回给客户端。</li></ol><p>遵循这套结构，即使未来项目变得再复杂，你也能保持清晰的思路和整洁的代码库。</p><h4 id="2-4-2-核心自动配置类"><a href="#2-4-2-核心自动配置类" class="headerlink" title="2.4.2 核心自动配置类"></a>2.4.2 核心自动配置类</h4><p>我们之所以能如此轻松地使用 <code>ChatClient</code>，完全得益于 Spring Boot 的自动配置机制。<code>spring-ai-openai-spring-boot-starter</code> 中的 <code>org.springframework.ai.openai.boot.OpenAiAutoConfiguration</code> 类在幕后为我们完成了所有繁重的工作。</p><p>它会：</p><ol><li>读取 <code>application.yml</code> 中 <code>spring.ai.openai</code> 前缀下的所有配置。</li><li>使用这些配置（特别是 <code>api-key</code>）创建一个与 OpenAI 服务器通信的 <code>RestTemplate</code>。</li><li>基于这个 <code>RestTemplate</code> 和其他配置（如 <code>model</code>, <code>temperature</code>），最终创建一个 <code>OpenAiChatClient</code> 的实例，并将其注册为 Spring 容器中的一个 Bean。</li><li>同时，它还会注册一个 <code>ChatClient.Builder</code> Bean，方便我们进行自定义构建。</li></ol><p>正是因为这些 Bean 已经被自动注册，我们才能在自己的 <code>ChatController</code> 中通过 <code>@Autowired</code> 轻松地注入并使用它们。这就是 Spring “约定优于配置”理念的完美体现。</p><h4 id="2-4-3-全局配置选项"><a href="#2-4-3-全局配置选项" class="headerlink" title="2.4.3 全局配置选项"></a>2.4.3 全局配置选项</h4><p>在 <code>application.yml</code> 中，除了 <code>api-key</code> 和 <code>model</code>，我们还可以配置更多影响 AI 行为的全局参数。这些参数位于 <code>spring.ai.openai.chat.options</code> 路径下。</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">ai:</span></span><br><span class="line">    <span class="attr">openai:</span></span><br><span class="line">      <span class="attr">api-key:</span> <span class="string">$&#123;OPENAI_API_KEY&#125;</span></span><br><span class="line">      <span class="attr">chat:</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">model:</span> <span class="string">DeepSeek-R1-0528</span></span><br><span class="line">          <span class="comment"># 温度，控制输出的随机性。值越高越随机，越低越确定。范围 0.0 - 2.0</span></span><br><span class="line">          <span class="attr">temperature:</span> <span class="number">0.7</span> </span><br><span class="line">          <span class="comment"># Top P 采样，与温度类似，但更侧重于从概率最高的词汇中选择。不建议与温度同时修改。</span></span><br><span class="line">          <span class="attr">top-p:</span> <span class="number">1</span> </span><br><span class="line">          <span class="comment"># 最大生成的 Token 数量，可以用来控制成本和响应长度</span></span><br><span class="line">          <span class="attr">max-tokens:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>这些配置会作为默认值，应用到每一次 <code>ChatClient</code> 调用中。当然，你也可以在单次调用中覆盖这些默认值，我们将在后续章节中详细介绍。</p><p>通过本章的快速入门，你应该已经感受到了 Spring AI 的简洁与强大。它将复杂的底层 API 调用封装得严严实实，让我们能以一种极其“Spring”的方式，轻松地将 AI 的智慧融入到应用之中。在接下来的章节里，我们将深入探索 Spring AI 提供的更多核心概念和强大功能。</p></div>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java微服务-AI篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务（一）：序章：迎接 Java AI 开发新纪元</title>
      <link href="/posts/27295.html"/>
      <url>/posts/27295.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="1-序章：迎接-Java-AI-开发新纪元"><a href="#1-序章：迎接-Java-AI-开发新纪元" class="headerlink" title="1. 序章：迎接 Java AI 开发新纪元"></a>1. 序章：迎接 Java AI 开发新纪元</h2><p>你好，亲爱的读者。在开始这段旅程之前，我想先与你分享我撰写这本教程的初衷。作为一名在 Java 生态中耕耘多年的开发者，我亲眼见证了 Spring 框架如何一次次地简化我们的开发工作，从最初的依赖注入到后来的 Spring Boot，它始终是企业级应用开发的基石。而今，我们正处在一个由人工智能，特别是大语言模型（LLM）引领的全新技术浪潮之巅。</p><p>在这场变革中，Python 生态凭借其先发优势，涌现出了像 LangChain、LlamaIndex 这样的优秀框架，它们极大地推动了 AI 应用的落地。然而，对于广大的 Java 开发者和海量的存量企业级系统而言，我们不禁要问：我们该如何拥抱这股浪潮？难道要放弃我们熟悉的、健壮的 Java 生态，转向一个全新的技术栈吗？</p><p>答案显然是否定的。正是基于这样的背景，Spring AI 应运而生。它不是对 Python 框架的简单复制，而是 Spring 团队深思熟虑后，为我们 Java&#x2F;Spring 开发者量身打造的一柄利器。它承载着一个清晰的使命：<strong>将构建生成式 AI 应用的复杂性，封装在开发者们熟悉的 Spring 模式之下，让每一位 Java 开发者都能快速、低门槛地成为 AI 应用的构建者。</strong></p><p>我希望通过这本教程，不仅能教会你如何使用 Spring AI 的 API，更能与你一同深入理解其背后的设计哲学，探索它如何将企业级的稳定性、可移植性和强大的生态整合能力，注入到 AI 应用开发中。让我们一起，迎接并开创属于 Java 的 AI 开发新纪元。</p><h3 id="1-1-为何需要-Spring-AI？"><a href="#1-1-为何需要-Spring-AI？" class="headerlink" title="1.1 为何需要 Spring AI？"></a>1.1 为何需要 Spring AI？</h3><h4 id="1-1-1-问题背景：Java-开发者的挑战与机遇"><a href="#1-1-1-问题背景：Java-开发者的挑战与机遇" class="headerlink" title="1.1.1 问题背景：Java 开发者的挑战与机遇"></a>1.1.1 问题背景：Java 开发者的挑战与机遇</h4><p>AI 技术的爆发，特别是以 ChatGPT 为代表的大语言模型（LLM）的出现，为软件行业带来了颠覆性的变革。它们不再仅仅是特定领域的算法工具，而是能够理解自然语言、生成内容、进行逻辑推理的通用能力平台。这意味着，未来的软件开发，将不再仅仅是编写精确的代码指令，更多地会涉及到如何与 AI 进行高效“沟通”和“协作”。</p><p>对于我们 Java 开发者而言，这既是挑战也是机遇：</p><ul><li><strong>挑战</strong>：传统的开发模式和技术栈，并未针对与 LLM 的交互进行优化。如何管理复杂的 Prompt、如何将外部知识（如企业内部文档）融入 AI 的回答、如何让 AI 调用已有的业务 API、如何在不同的 AI 服务商之间平滑切换……这些都成了摆在我们面前的现实难题。</li><li><strong>机遇</strong>：全球绝大多数的企业级核心应用和数据都构建在 Java 技术栈之上。如果能将 AI 的强大能力与这些现有的、经过生产环境严苛考验的系统无缝融合，将催生出巨大的商业价值。例如，为传统的 CRM 系统增加一个能理解客户意图的智能客服；让 ERP 系统能够根据自然语言指令生成复杂的财务报表。</li></ul><h4 id="1-1-2-Python-生态的启示"><a href="#1-1-2-Python-生态的启示" class="headerlink" title="1.1.2 Python 生态的启示"></a>1.1.2 Python 生态的启示</h4><p>在 AI 应用开发领域，Python 生态无疑走在了前列。以 LangChain 和 LlamaIndex 为代表的框架，通过提供一系列标准化的组件和链式（Chain）调用模式，极大地简化了构建 LLM 应用的流程。它们的成功揭示了一个关键点：在应用层面，开发者需要的不是从零开始研究模型算法，而是一个<strong>高效的“胶水层”或“编排框架”</strong>，用来粘合业务逻辑、数据和底层的 AI 模型。</p><p>这些框架的核心思想包括：</p><ul><li><strong>模型I&#x2F;O封装</strong>：将与不同 LLM 的 API 交互统一化。</li><li><strong>Prompt 管理</strong>：提供模板化、可复用的 Prompt 工程能力。</li><li><strong>数据连接</strong>：轻松加载、转换和向量化外部文档，为 RAG（检索增强生成）提供支持。</li><li><strong>链与代理</strong>：将多个调用步骤组合成一个连贯的工作流，甚至赋予 AI 自主规划和使用工具的能力。</li></ul><h4 id="1-1-3-Spring-AI-的诞生"><a href="#1-1-3-Spring-AI-的诞生" class="headerlink" title="1.1.3 Spring AI 的诞生"></a>1.1.3 Spring AI 的诞生</h4><p>Spring AI 正是在深刻理解了 Java 开发者的痛点和借鉴了 Python 生态成功经验的基础上诞生的。它并非要成为 LangChain 的 Java 克隆版，而是要成为 <strong>Spring 生态原生的 AI 应用开发框架</strong>。这意味着它将 AI 能力的集成，完全融入了 Spring 的核心理念之中，为 Java 开发者提供了一条熟悉、平滑且强大的 AI 应用开发路径。</p><blockquote><p>Spring AI 的使命，是让 AI 应用的开发过程变得“Spring 化”——即通过自动配置、依赖注入和统一的编程模型，将复杂的底层实现隐藏起来，让开发者能聚焦于业务创新本身。</p></blockquote><h3 id="1-2-Spring-AI-的核心设计哲学"><a href="#1-2-Spring-AI-的核心设计哲学" class="headerlink" title="1.2 Spring AI 的核心设计哲学"></a>1.2 Spring AI 的核心设计哲学</h3><p>Spring AI 的强大之处，并不仅仅在于它提供了哪些功能，更在于其背后遵循的一系列深刻的设计哲学。这些哲学确保了用它构建的应用不仅能快速开发，更能满足企业级的严苛要求。</p><h4 id="1-2-1-可移植性"><a href="#1-2-1-可移植性" class="headerlink" title="1.2.1 可移植性"></a>1.2.1 可移植性</h4><p>这是 Spring AI 最核心的设计原则之一。在当前 AI 模型服务百家争鸣的时代，将应用与某一个特定的 AI 提供商（如 OpenAI）深度绑定，是极具风险的。未来你可能因为成本、性能或特定功能的需求，需要切换到 Azure OpenAI、Anthropic Claude、Google Gemini 或是某个开源的本地模型。</p><p>Spring AI 通过定义一套<strong>统一的、可移植的 API</strong>（如 <code>ChatClient</code>, <code>EmbeddingClient</code>, <code>VectorStore</code>）来解决这个问题。你的业务代码只与这些接口交互，完全感知不到底层具体是哪个模型在提供服务。切换 AI 提供商，在绝大多数情况下，仅仅是更换一个 Maven 依赖和修改几行配置文件的事情，业务代码无需任何改动。</p><ul><li><strong>场景示例</strong>：你的应用最初使用 OpenAI 的模型。后来，公司出于数据合规要求，需要切换到部署在私有云的 Azure OpenAI 服务。使用 Spring AI，你只需要将 <code>spring-boot-starter-openai</code> 依赖更换为 <code>spring-boot-starter-azure-openai</code>，并更新 <code>application.yml</code> 中的配置即可，整个过程可能只需要几分钟。</li></ul><h4 id="1-2-2-模块化"><a href="#1-2-2-模块化" class="headerlink" title="1.2.2 模块化"></a>1.2.2 模块化</h4><p>Spring AI 遵循 Spring Boot 的“按需引入”原则，将不同的功能拆分到独立的模块化 Starter 中。你的应用需要什么功能，就引入对应的依赖，绝不强制你引入一整个庞大而臃肿的全家桶。</p><ul><li>需要与聊天模型交互？引入 <code>spring-ai-openai-spring-boot-starter</code>。</li><li>需要使用向量数据库？引入 <code>spring-ai-pgvector-store-spring-boot-starter</code>。</li><li>需要文生图功能？引入 <code>spring-ai-image-models-spring-boot-starter</code>。</li></ul><p>这种模块化的设计，使得你的应用可以保持轻量和整洁，只包含你真正需要的功能。</p><h4 id="1-2-3-Spring-原生体验"><a href="#1-2-3-Spring-原生体验" class="headerlink" title="1.2.3 Spring 原生体验"></a>1.2.3 Spring 原生体验</h4><p>Spring AI 不是一个孤立的库，它与 Spring 生态系统是血肉相连的。它充分利用了 Spring 框架的强大能力，为开发者提供了无与伦比的便利性。</p><ul><li><strong>自动配置</strong>：你只需要在配置文件中提供 API Key 等少量信息，Spring AI 就能自动为你创建并配置好 <code>ChatClient</code> 等核心组件的 Bean。</li><li><strong>依赖注入</strong> 你可以在任何 Spring 组件（如 <code>@Service</code>, <code>@RestController</code>）中，通过 <code>@Autowired</code> 直接注入 <code>ChatClient</code> 并使用，完全符合 Spring 的开发习惯。</li><li><strong>AOP 与其他 Spring 特性</strong>: 你可以像对其他 Spring Bean 一样，对 AI 相关的 Bean 应用 AOP（如添加日志、事务）、进行精细化的配置（<code>@ConfigurationProperties</code>）等。</li></ul><h4 id="1-2-4-企业级特性"><a href="#1-2-4-企业级特性" class="headerlink" title="1.2.4 企业级特性"></a>1.2.4 企业级特性</h4><p>除了开发便利性，Spring AI 还深刻理解企业级应用对<strong>稳定性、可观测性和安全性</strong>的诉求。</p><ul><li><strong>可观测性</strong>：Spring AI 内置了对 Micrometer 的支持，能够自动暴露与 AI 调用相关的核心指标，如 Token 消耗、请求延迟、错误率等。你可以轻松地将这些指标对接到 Prometheus &amp; Grafana 等监控系统中，实现对 AI 服务成本和性能的精细化度量。</li><li><strong>生产环境部署</strong>: Spring AI 从设计之初就考虑到了云原生和高性能场景，支持虚拟线程以提升 I&#x2F;O 密集型 AI 调用的吞吐量，并兼容 GraalVM 原生镜像，实现应用的快速启动和低内存占用。</li></ul><h3 id="1-3-Spring-AI-在-AI-技术栈中的定位"><a href="#1-3-Spring-AI-在-AI-技术栈中的定位" class="headerlink" title="1.3 Spring AI 在 AI 技术栈中的定位"></a>1.3 Spring AI 在 AI 技术栈中的定位</h3><p>为了更清晰地理解 Spring AI 的角色，我们可以通过一段简述来描绘它在整个 AI 技术栈中的位置。</p><ol><li><strong>向上支撑业务应用</strong>：为上层业务逻辑提供一套稳定、统一、易用的 AI 能力调用接口。业务开发者无需关心底层 AI 模型的具体实现细节和 API 差异。</li><li><strong>向下连接 AI 生态</strong>：它作为适配器，连接并管理着各种底层服务，包括：<ul><li><strong>AI 模型服务</strong>：如 OpenAI, Azure OpenAI, Google Vertex AI, Anthropic, Ollama 等。</li><li><strong>数据源与存储</strong>：特别是向量数据库（Vector Stores），如 PGVector, Milvus, Redis, Chroma 等，它们是实现 RAG（检索增强生成）模式的关键。</li></ul></li></ol><blockquote><p><strong>核心定位</strong>：Spring AI <strong>专注于应用集成与编排，而非模型训练</strong>。它旨在帮助开发者“使用”好 AI 模型，将 AI 的通用能力与具体的业务场景相结合，创造出实际的应用价值。</p></blockquote><h4 id="1-3-1-与-LangChain4j-等框架的对比"><a href="#1-3-1-与-LangChain4j-等框架的对比" class="headerlink" title="1.3.1 与 LangChain4j 等框架的对比"></a>1.3.1 与 LangChain4j 等框架的对比</h4><p>在 Java 的 AI 开发生态中，除了 Spring AI，也存在其他优秀的框架，如 LangChain4j。了解它们之间的异同，有助于我们做出更合适的选型。</p><table><thead><tr><th align="left">特性</th><th align="left">Spring AI</th><th align="left">LangChain4j</th></tr></thead><tbody><tr><td align="left"><strong>核心理念</strong></td><td align="left"><strong>深度融入 Spring 生态</strong>，提供原生的 Spring Boot 开发体验。</td><td align="left"><strong>作为通用的 Java AI 库</strong>，可以独立使用，也可与其他框架（如 Quarkus, Micronaut）集成。</td></tr><tr><td align="left"><strong>配置方式</strong></td><td align="left">强依赖 Spring Boot 的自动配置 (<code>application.properties</code>&#x2F;<code>yml</code>)。</td><td align="left">提供灵活的编程式构建器 (Builder)，配置更自由。</td></tr><tr><td align="left"><strong>生态整合</strong></td><td align="left">与 Spring Data, Spring Batch, Spring Cloud 等生态组件有天然的、深度的整合潜力。</td><td align="left">更加独立，与特定框架的整合需要开发者自行完成。</td></tr><tr><td align="left"><strong>目标用户</strong></td><td align="left"><strong>Spring&#x2F;Spring Boot 开发者</strong>，特别是企业级应用开发者。</td><td align="left">更广泛的 Java 开发者，包括对 Spring 不熟悉的开发者。</td></tr><tr><td align="left"><strong>优势</strong></td><td align="left">开发体验对 Spring 用户极其平滑，企业级特性（如可观测性）集成度高。</td><td align="left">灵活性高，不锁定于任何一个框架，学习曲线可能对非 Spring 用户更平缓。</td></tr></tbody></table><p><strong>结论</strong>：两者都是非常优秀的框架。如果你的技术栈是基于 Spring Boot 的，或者你正在构建复杂的企业级 AI 应用，<strong>Spring AI 几乎是你的不二之选</strong>，因为它能为你提供无与伦比的生态整合能力和开发便利性。如果你需要一个更轻量、更独立的 Java AI 库，或者你的项目未使用 Spring，那么 LangChain4j 会是一个非常好的选择。</p><h3 id="1-4-本教程导览"><a href="#1-4-本教程导览" class="headerlink" title="1.4 本教程导览"></a>1.4 本教程导览</h3><p>本教程将带领你从零开始，逐步深入 Spring AI 的世界。无论你是 AI 领域的新手，还是希望将 AI 能力引入现有 Java 项目的资深开发者，都能在这里找到清晰的学习路径。</p><h4 id="1-4-1-前置知识要求"><a href="#1-4-1-前置知识要求" class="headerlink" title="1.4.1 前置知识要求"></a>1.4.1 前置知识要求</h4><p>为了更好地跟上本教程的节奏，我希望你具备以下基础：</p><ul><li>熟练掌握 <strong>Java</strong> 编程语言（JDK 17+）。</li><li>具备 <strong>Spring Boot</strong> 的基础开发经验，了解依赖注入、Bean、配置文件等核心概念。</li><li>了解 <strong>Maven</strong> 或 <strong>Gradle</strong> 的基本使用。</li></ul><p>你不需要有任何 AI 或机器学习的背景知识，教程中涉及到的所有 AI 概念，我都会用通俗易懂的方式进行解释。</p><h4 id="1-4-4-源码与示例"><a href="#1-4-4-源码与示例" class="headerlink" title="1.4.4 源码与示例"></a>1.4.4 源码与示例</h4><p>本教程所有章节的完整代码示例，都可以在以下 GitHub 仓库中找到。我强烈建议你将项目克隆到本地，一边阅读，一边动手实践。</p><blockquote><p><strong>代码仓库</strong>: <code>https://github.com/your-username/spring-ai-tutorial-examples</code> (此为占位符，请替换为实际地址)</p></blockquote><p>现在，让我们正式启程，构建你的第一个 AI 应用吧！</p><hr></div>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java微服务-AI篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
